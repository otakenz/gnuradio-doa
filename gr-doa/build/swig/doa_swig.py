# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _doa_swig
else:
    import _doa_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def high_res_timer_now() -> "gr::high_res_timer_type":
    r"""high_res_timer_now() -> gr::high_res_timer_type"""
    return _doa_swig.high_res_timer_now()

def high_res_timer_now_perfmon() -> "gr::high_res_timer_type":
    r"""high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _doa_swig.high_res_timer_now_perfmon()

def high_res_timer_tps() -> "gr::high_res_timer_type":
    r"""high_res_timer_tps() -> gr::high_res_timer_type"""
    return _doa_swig.high_res_timer_tps()

def high_res_timer_epoch() -> "gr::high_res_timer_type":
    r"""high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _doa_swig.high_res_timer_epoch()
class capon_ccf(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::capon_ccf.

    To avoid accidental use of raw pointers, doa::capon_ccf's constructor is in a private implementation class. doa::capon_ccf::make is the public interface for creating new instances.

    Args:
        vector_size : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vector_size: "int") -> "gr::doa::capon_ccf::sptr":
        r"""
        make(int vector_size) -> capon_ccf_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::capon_ccf.

        To avoid accidental use of raw pointers, doa::capon_ccf's constructor is in a private implementation class. doa::capon_ccf::make is the public interface for creating new instances.

        Args:
            vector_size : 
        """
        return _doa_swig.capon_ccf_make(vector_size)
    __swig_destroy__ = _doa_swig.delete_capon_ccf

# Register capon_ccf in _doa_swig:
_doa_swig.capon_ccf_swigregister(capon_ccf)

def capon_ccf_make(vector_size: "int") -> "gr::doa::capon_ccf::sptr":
    r"""
    capon_ccf_make(int vector_size) -> capon_ccf_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::capon_ccf.

    To avoid accidental use of raw pointers, doa::capon_ccf's constructor is in a private implementation class. doa::capon_ccf::make is the public interface for creating new instances.

    Args:
        vector_size : 
    """
    return _doa_swig.capon_ccf_make(vector_size)

class capon_ccf_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::capon_ccf > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(capon_ccf_sptr self) -> capon_ccf_sptr
        __init__(capon_ccf_sptr self, capon_ccf p) -> capon_ccf_sptr
        """
        _doa_swig.capon_ccf_sptr_swiginit(self, _doa_swig.new_capon_ccf_sptr(*args))

    def __deref__(self) -> "gr::doa::capon_ccf *":
        r"""__deref__(capon_ccf_sptr self) -> capon_ccf"""
        return _doa_swig.capon_ccf_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_capon_ccf_sptr

    def make(self, vector_size: "int") -> "gr::doa::capon_ccf::sptr":
        r"""
        make(capon_ccf_sptr self, int vector_size) -> capon_ccf_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::capon_ccf.

        To avoid accidental use of raw pointers, doa::capon_ccf's constructor is in a private implementation class. doa::capon_ccf::make is the public interface for creating new instances.

        Args:
            vector_size : 
        """
        return _doa_swig.capon_ccf_sptr_make(self, vector_size)

    def history(self) -> "unsigned int":
        r"""history(capon_ccf_sptr self) -> unsigned int"""
        return _doa_swig.capon_ccf_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(capon_ccf_sptr self, int which, int delay)
        declare_sample_delay(capon_ccf_sptr self, unsigned int delay)
        """
        return _doa_swig.capon_ccf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(capon_ccf_sptr self, int which) -> unsigned int"""
        return _doa_swig.capon_ccf_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(capon_ccf_sptr self, int multiple)"""
        return _doa_swig.capon_ccf_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(capon_ccf_sptr self) -> int"""
        return _doa_swig.capon_ccf_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(capon_ccf_sptr self) -> double"""
        return _doa_swig.capon_ccf_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(capon_ccf_sptr self) -> uint64_t"""
        return _doa_swig.capon_ccf_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(capon_ccf_sptr self) -> uint64_t"""
        return _doa_swig.capon_ccf_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(capon_ccf_sptr self) -> bool"""
        return _doa_swig.capon_ccf_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(capon_ccf_sptr self) -> bool"""
        return _doa_swig.capon_ccf_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(capon_ccf_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.capon_ccf_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(capon_ccf_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.capon_ccf_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(capon_ccf_sptr self, std::string level)"""
        return _doa_swig.capon_ccf_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(capon_ccf_sptr self) -> std::string"""
        return _doa_swig.capon_ccf_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(capon_ccf_sptr self) -> int"""
        return _doa_swig.capon_ccf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(capon_ccf_sptr self, int m)"""
        return _doa_swig.capon_ccf_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(capon_ccf_sptr self)"""
        return _doa_swig.capon_ccf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(capon_ccf_sptr self) -> bool"""
        return _doa_swig.capon_ccf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(capon_ccf_sptr self, int m)"""
        return _doa_swig.capon_ccf_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(capon_ccf_sptr self) -> int"""
        return _doa_swig.capon_ccf_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(capon_ccf_sptr self, int i) -> long"""
        return _doa_swig.capon_ccf_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(capon_ccf_sptr self, long max_output_buffer)
        set_max_output_buffer(capon_ccf_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.capon_ccf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(capon_ccf_sptr self, int i) -> long"""
        return _doa_swig.capon_ccf_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(capon_ccf_sptr self, long min_output_buffer)
        set_min_output_buffer(capon_ccf_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.capon_ccf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(capon_ccf_sptr self) -> float"""
        return _doa_swig.capon_ccf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(capon_ccf_sptr self) -> float"""
        return _doa_swig.capon_ccf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(capon_ccf_sptr self) -> float"""
        return _doa_swig.capon_ccf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(capon_ccf_sptr self) -> float"""
        return _doa_swig.capon_ccf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(capon_ccf_sptr self) -> float"""
        return _doa_swig.capon_ccf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(capon_ccf_sptr self) -> float"""
        return _doa_swig.capon_ccf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(capon_ccf_sptr self, int which) -> float
        pc_input_buffers_full(capon_ccf_sptr self) -> pmt_vector_float
        """
        return _doa_swig.capon_ccf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(capon_ccf_sptr self, int which) -> float
        pc_input_buffers_full_avg(capon_ccf_sptr self) -> pmt_vector_float
        """
        return _doa_swig.capon_ccf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(capon_ccf_sptr self, int which) -> float
        pc_input_buffers_full_var(capon_ccf_sptr self) -> pmt_vector_float
        """
        return _doa_swig.capon_ccf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(capon_ccf_sptr self, int which) -> float
        pc_output_buffers_full(capon_ccf_sptr self) -> pmt_vector_float
        """
        return _doa_swig.capon_ccf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(capon_ccf_sptr self, int which) -> float
        pc_output_buffers_full_avg(capon_ccf_sptr self) -> pmt_vector_float
        """
        return _doa_swig.capon_ccf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(capon_ccf_sptr self, int which) -> float
        pc_output_buffers_full_var(capon_ccf_sptr self) -> pmt_vector_float
        """
        return _doa_swig.capon_ccf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(capon_ccf_sptr self) -> float"""
        return _doa_swig.capon_ccf_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(capon_ccf_sptr self) -> float"""
        return _doa_swig.capon_ccf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(capon_ccf_sptr self) -> float"""
        return _doa_swig.capon_ccf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(capon_ccf_sptr self) -> float"""
        return _doa_swig.capon_ccf_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(capon_ccf_sptr self) -> float"""
        return _doa_swig.capon_ccf_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(capon_ccf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.capon_ccf_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(capon_ccf_sptr self)"""
        return _doa_swig.capon_ccf_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(capon_ccf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.capon_ccf_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(capon_ccf_sptr self) -> int"""
        return _doa_swig.capon_ccf_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(capon_ccf_sptr self) -> int"""
        return _doa_swig.capon_ccf_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(capon_ccf_sptr self, int priority) -> int"""
        return _doa_swig.capon_ccf_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(capon_ccf_sptr self) -> std::string"""
        return _doa_swig.capon_ccf_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(capon_ccf_sptr self) -> std::string"""
        return _doa_swig.capon_ccf_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(capon_ccf_sptr self) -> io_signature_sptr"""
        return _doa_swig.capon_ccf_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(capon_ccf_sptr self) -> io_signature_sptr"""
        return _doa_swig.capon_ccf_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(capon_ccf_sptr self) -> long"""
        return _doa_swig.capon_ccf_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(capon_ccf_sptr self) -> basic_block_sptr"""
        return _doa_swig.capon_ccf_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(capon_ccf_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.capon_ccf_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(capon_ccf_sptr self) -> std::string"""
        return _doa_swig.capon_ccf_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(capon_ccf_sptr self, std::string name)"""
        return _doa_swig.capon_ccf_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(capon_ccf_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.capon_ccf_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(capon_ccf_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.capon_ccf_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(capon_ccf_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.capon_ccf_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(capon_ccf_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.capon_ccf_sptr_message_subscribers(self, which_port)

# Register capon_ccf_sptr in _doa_swig:
_doa_swig.capon_ccf_sptr_swigregister(capon_ccf_sptr)


capon_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
capon_ccf = capon_ccf.make;

class unwrap_ff(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::unwrap_ff.

    To avoid accidental use of raw pointers, doa::unwrap_ff's constructor is in a private implementation class. doa::unwrap_ff::make is the public interface for creating new instances.

    Args:
        vector_size : 
        min : 
        max : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vector_size: "int", min: "float", max: "float") -> "gr::doa::unwrap_ff::sptr":
        r"""
        make(int vector_size, float min, float max) -> unwrap_ff_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::unwrap_ff.

        To avoid accidental use of raw pointers, doa::unwrap_ff's constructor is in a private implementation class. doa::unwrap_ff::make is the public interface for creating new instances.

        Args:
            vector_size : 
            min : 
            max : 
        """
        return _doa_swig.unwrap_ff_make(vector_size, min, max)
    __swig_destroy__ = _doa_swig.delete_unwrap_ff

# Register unwrap_ff in _doa_swig:
_doa_swig.unwrap_ff_swigregister(unwrap_ff)

def unwrap_ff_make(vector_size: "int", min: "float", max: "float") -> "gr::doa::unwrap_ff::sptr":
    r"""
    unwrap_ff_make(int vector_size, float min, float max) -> unwrap_ff_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::unwrap_ff.

    To avoid accidental use of raw pointers, doa::unwrap_ff's constructor is in a private implementation class. doa::unwrap_ff::make is the public interface for creating new instances.

    Args:
        vector_size : 
        min : 
        max : 
    """
    return _doa_swig.unwrap_ff_make(vector_size, min, max)

class unwrap_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::unwrap_ff > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(unwrap_ff_sptr self) -> unwrap_ff_sptr
        __init__(unwrap_ff_sptr self, unwrap_ff p) -> unwrap_ff_sptr
        """
        _doa_swig.unwrap_ff_sptr_swiginit(self, _doa_swig.new_unwrap_ff_sptr(*args))

    def __deref__(self) -> "gr::doa::unwrap_ff *":
        r"""__deref__(unwrap_ff_sptr self) -> unwrap_ff"""
        return _doa_swig.unwrap_ff_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_unwrap_ff_sptr

    def make(self, vector_size: "int", min: "float", max: "float") -> "gr::doa::unwrap_ff::sptr":
        r"""
        make(unwrap_ff_sptr self, int vector_size, float min, float max) -> unwrap_ff_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::unwrap_ff.

        To avoid accidental use of raw pointers, doa::unwrap_ff's constructor is in a private implementation class. doa::unwrap_ff::make is the public interface for creating new instances.

        Args:
            vector_size : 
            min : 
            max : 
        """
        return _doa_swig.unwrap_ff_sptr_make(self, vector_size, min, max)

    def history(self) -> "unsigned int":
        r"""history(unwrap_ff_sptr self) -> unsigned int"""
        return _doa_swig.unwrap_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(unwrap_ff_sptr self, int which, int delay)
        declare_sample_delay(unwrap_ff_sptr self, unsigned int delay)
        """
        return _doa_swig.unwrap_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(unwrap_ff_sptr self, int which) -> unsigned int"""
        return _doa_swig.unwrap_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(unwrap_ff_sptr self, int multiple)"""
        return _doa_swig.unwrap_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(unwrap_ff_sptr self) -> int"""
        return _doa_swig.unwrap_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(unwrap_ff_sptr self) -> double"""
        return _doa_swig.unwrap_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(unwrap_ff_sptr self) -> uint64_t"""
        return _doa_swig.unwrap_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(unwrap_ff_sptr self) -> uint64_t"""
        return _doa_swig.unwrap_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(unwrap_ff_sptr self) -> bool"""
        return _doa_swig.unwrap_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(unwrap_ff_sptr self) -> bool"""
        return _doa_swig.unwrap_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(unwrap_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.unwrap_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(unwrap_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.unwrap_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(unwrap_ff_sptr self, std::string level)"""
        return _doa_swig.unwrap_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(unwrap_ff_sptr self) -> std::string"""
        return _doa_swig.unwrap_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(unwrap_ff_sptr self) -> int"""
        return _doa_swig.unwrap_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(unwrap_ff_sptr self, int m)"""
        return _doa_swig.unwrap_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(unwrap_ff_sptr self)"""
        return _doa_swig.unwrap_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(unwrap_ff_sptr self) -> bool"""
        return _doa_swig.unwrap_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(unwrap_ff_sptr self, int m)"""
        return _doa_swig.unwrap_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(unwrap_ff_sptr self) -> int"""
        return _doa_swig.unwrap_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(unwrap_ff_sptr self, int i) -> long"""
        return _doa_swig.unwrap_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(unwrap_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(unwrap_ff_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.unwrap_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(unwrap_ff_sptr self, int i) -> long"""
        return _doa_swig.unwrap_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(unwrap_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(unwrap_ff_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.unwrap_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(unwrap_ff_sptr self) -> float"""
        return _doa_swig.unwrap_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(unwrap_ff_sptr self) -> float"""
        return _doa_swig.unwrap_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(unwrap_ff_sptr self) -> float"""
        return _doa_swig.unwrap_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(unwrap_ff_sptr self) -> float"""
        return _doa_swig.unwrap_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(unwrap_ff_sptr self) -> float"""
        return _doa_swig.unwrap_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(unwrap_ff_sptr self) -> float"""
        return _doa_swig.unwrap_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(unwrap_ff_sptr self, int which) -> float
        pc_input_buffers_full(unwrap_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.unwrap_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(unwrap_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(unwrap_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.unwrap_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(unwrap_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(unwrap_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.unwrap_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(unwrap_ff_sptr self, int which) -> float
        pc_output_buffers_full(unwrap_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.unwrap_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(unwrap_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(unwrap_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.unwrap_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(unwrap_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(unwrap_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.unwrap_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(unwrap_ff_sptr self) -> float"""
        return _doa_swig.unwrap_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(unwrap_ff_sptr self) -> float"""
        return _doa_swig.unwrap_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(unwrap_ff_sptr self) -> float"""
        return _doa_swig.unwrap_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(unwrap_ff_sptr self) -> float"""
        return _doa_swig.unwrap_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(unwrap_ff_sptr self) -> float"""
        return _doa_swig.unwrap_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(unwrap_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.unwrap_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(unwrap_ff_sptr self)"""
        return _doa_swig.unwrap_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(unwrap_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.unwrap_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(unwrap_ff_sptr self) -> int"""
        return _doa_swig.unwrap_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(unwrap_ff_sptr self) -> int"""
        return _doa_swig.unwrap_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(unwrap_ff_sptr self, int priority) -> int"""
        return _doa_swig.unwrap_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(unwrap_ff_sptr self) -> std::string"""
        return _doa_swig.unwrap_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(unwrap_ff_sptr self) -> std::string"""
        return _doa_swig.unwrap_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(unwrap_ff_sptr self) -> io_signature_sptr"""
        return _doa_swig.unwrap_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(unwrap_ff_sptr self) -> io_signature_sptr"""
        return _doa_swig.unwrap_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(unwrap_ff_sptr self) -> long"""
        return _doa_swig.unwrap_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(unwrap_ff_sptr self) -> basic_block_sptr"""
        return _doa_swig.unwrap_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(unwrap_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.unwrap_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(unwrap_ff_sptr self) -> std::string"""
        return _doa_swig.unwrap_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(unwrap_ff_sptr self, std::string name)"""
        return _doa_swig.unwrap_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(unwrap_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.unwrap_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(unwrap_ff_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.unwrap_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(unwrap_ff_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.unwrap_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(unwrap_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.unwrap_ff_sptr_message_subscribers(self, which_port)

# Register unwrap_ff_sptr in _doa_swig:
_doa_swig.unwrap_ff_sptr_swigregister(unwrap_ff_sptr)


unwrap_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
unwrap_ff = unwrap_ff.make;

class linearslope_ff(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::linearslope_ff.

    To avoid accidental use of raw pointers, doa::linearslope_ff's constructor is in a private implementation class. doa::linearslope_ff::make is the public interface for creating new instances.

    Args:
        vector_size : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vector_size: "int") -> "gr::doa::linearslope_ff::sptr":
        r"""
        make(int vector_size) -> linearslope_ff_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::linearslope_ff.

        To avoid accidental use of raw pointers, doa::linearslope_ff's constructor is in a private implementation class. doa::linearslope_ff::make is the public interface for creating new instances.

        Args:
            vector_size : 
        """
        return _doa_swig.linearslope_ff_make(vector_size)
    __swig_destroy__ = _doa_swig.delete_linearslope_ff

# Register linearslope_ff in _doa_swig:
_doa_swig.linearslope_ff_swigregister(linearslope_ff)

def linearslope_ff_make(vector_size: "int") -> "gr::doa::linearslope_ff::sptr":
    r"""
    linearslope_ff_make(int vector_size) -> linearslope_ff_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::linearslope_ff.

    To avoid accidental use of raw pointers, doa::linearslope_ff's constructor is in a private implementation class. doa::linearslope_ff::make is the public interface for creating new instances.

    Args:
        vector_size : 
    """
    return _doa_swig.linearslope_ff_make(vector_size)

class linearslope_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::linearslope_ff > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(linearslope_ff_sptr self) -> linearslope_ff_sptr
        __init__(linearslope_ff_sptr self, linearslope_ff p) -> linearslope_ff_sptr
        """
        _doa_swig.linearslope_ff_sptr_swiginit(self, _doa_swig.new_linearslope_ff_sptr(*args))

    def __deref__(self) -> "gr::doa::linearslope_ff *":
        r"""__deref__(linearslope_ff_sptr self) -> linearslope_ff"""
        return _doa_swig.linearslope_ff_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_linearslope_ff_sptr

    def make(self, vector_size: "int") -> "gr::doa::linearslope_ff::sptr":
        r"""
        make(linearslope_ff_sptr self, int vector_size) -> linearslope_ff_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::linearslope_ff.

        To avoid accidental use of raw pointers, doa::linearslope_ff's constructor is in a private implementation class. doa::linearslope_ff::make is the public interface for creating new instances.

        Args:
            vector_size : 
        """
        return _doa_swig.linearslope_ff_sptr_make(self, vector_size)

    def history(self) -> "unsigned int":
        r"""history(linearslope_ff_sptr self) -> unsigned int"""
        return _doa_swig.linearslope_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(linearslope_ff_sptr self, int which, int delay)
        declare_sample_delay(linearslope_ff_sptr self, unsigned int delay)
        """
        return _doa_swig.linearslope_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(linearslope_ff_sptr self, int which) -> unsigned int"""
        return _doa_swig.linearslope_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(linearslope_ff_sptr self, int multiple)"""
        return _doa_swig.linearslope_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(linearslope_ff_sptr self) -> int"""
        return _doa_swig.linearslope_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(linearslope_ff_sptr self) -> double"""
        return _doa_swig.linearslope_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(linearslope_ff_sptr self) -> uint64_t"""
        return _doa_swig.linearslope_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(linearslope_ff_sptr self) -> uint64_t"""
        return _doa_swig.linearslope_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(linearslope_ff_sptr self) -> bool"""
        return _doa_swig.linearslope_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(linearslope_ff_sptr self) -> bool"""
        return _doa_swig.linearslope_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(linearslope_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.linearslope_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(linearslope_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.linearslope_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(linearslope_ff_sptr self, std::string level)"""
        return _doa_swig.linearslope_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(linearslope_ff_sptr self) -> std::string"""
        return _doa_swig.linearslope_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(linearslope_ff_sptr self) -> int"""
        return _doa_swig.linearslope_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(linearslope_ff_sptr self, int m)"""
        return _doa_swig.linearslope_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(linearslope_ff_sptr self)"""
        return _doa_swig.linearslope_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(linearslope_ff_sptr self) -> bool"""
        return _doa_swig.linearslope_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(linearslope_ff_sptr self, int m)"""
        return _doa_swig.linearslope_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(linearslope_ff_sptr self) -> int"""
        return _doa_swig.linearslope_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(linearslope_ff_sptr self, int i) -> long"""
        return _doa_swig.linearslope_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(linearslope_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(linearslope_ff_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.linearslope_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(linearslope_ff_sptr self, int i) -> long"""
        return _doa_swig.linearslope_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(linearslope_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(linearslope_ff_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.linearslope_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(linearslope_ff_sptr self) -> float"""
        return _doa_swig.linearslope_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(linearslope_ff_sptr self) -> float"""
        return _doa_swig.linearslope_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(linearslope_ff_sptr self) -> float"""
        return _doa_swig.linearslope_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(linearslope_ff_sptr self) -> float"""
        return _doa_swig.linearslope_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(linearslope_ff_sptr self) -> float"""
        return _doa_swig.linearslope_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(linearslope_ff_sptr self) -> float"""
        return _doa_swig.linearslope_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(linearslope_ff_sptr self, int which) -> float
        pc_input_buffers_full(linearslope_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.linearslope_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(linearslope_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(linearslope_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.linearslope_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(linearslope_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(linearslope_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.linearslope_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(linearslope_ff_sptr self, int which) -> float
        pc_output_buffers_full(linearslope_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.linearslope_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(linearslope_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(linearslope_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.linearslope_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(linearslope_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(linearslope_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.linearslope_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(linearslope_ff_sptr self) -> float"""
        return _doa_swig.linearslope_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(linearslope_ff_sptr self) -> float"""
        return _doa_swig.linearslope_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(linearslope_ff_sptr self) -> float"""
        return _doa_swig.linearslope_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(linearslope_ff_sptr self) -> float"""
        return _doa_swig.linearslope_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(linearslope_ff_sptr self) -> float"""
        return _doa_swig.linearslope_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(linearslope_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.linearslope_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(linearslope_ff_sptr self)"""
        return _doa_swig.linearslope_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(linearslope_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.linearslope_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(linearslope_ff_sptr self) -> int"""
        return _doa_swig.linearslope_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(linearslope_ff_sptr self) -> int"""
        return _doa_swig.linearslope_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(linearslope_ff_sptr self, int priority) -> int"""
        return _doa_swig.linearslope_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(linearslope_ff_sptr self) -> std::string"""
        return _doa_swig.linearslope_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(linearslope_ff_sptr self) -> std::string"""
        return _doa_swig.linearslope_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(linearslope_ff_sptr self) -> io_signature_sptr"""
        return _doa_swig.linearslope_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(linearslope_ff_sptr self) -> io_signature_sptr"""
        return _doa_swig.linearslope_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(linearslope_ff_sptr self) -> long"""
        return _doa_swig.linearslope_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(linearslope_ff_sptr self) -> basic_block_sptr"""
        return _doa_swig.linearslope_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(linearslope_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.linearslope_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(linearslope_ff_sptr self) -> std::string"""
        return _doa_swig.linearslope_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(linearslope_ff_sptr self, std::string name)"""
        return _doa_swig.linearslope_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(linearslope_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.linearslope_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(linearslope_ff_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.linearslope_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(linearslope_ff_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.linearslope_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(linearslope_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.linearslope_ff_sptr_message_subscribers(self, which_port)

# Register linearslope_ff_sptr in _doa_swig:
_doa_swig.linearslope_ff_sptr_swigregister(linearslope_ff_sptr)


linearslope_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
linearslope_ff = linearslope_ff.make;

class mode_ii(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::mode_ii.

    To avoid accidental use of raw pointers, doa::mode_ii's constructor is in a private implementation class. doa::mode_ii::make is the public interface for creating new instances.

    Args:
        vector_size : 
        max_value : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vector_size: "int", max_value: "int") -> "gr::doa::mode_ii::sptr":
        r"""
        make(int vector_size, int max_value) -> mode_ii_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::mode_ii.

        To avoid accidental use of raw pointers, doa::mode_ii's constructor is in a private implementation class. doa::mode_ii::make is the public interface for creating new instances.

        Args:
            vector_size : 
            max_value : 
        """
        return _doa_swig.mode_ii_make(vector_size, max_value)
    __swig_destroy__ = _doa_swig.delete_mode_ii

# Register mode_ii in _doa_swig:
_doa_swig.mode_ii_swigregister(mode_ii)

def mode_ii_make(vector_size: "int", max_value: "int") -> "gr::doa::mode_ii::sptr":
    r"""
    mode_ii_make(int vector_size, int max_value) -> mode_ii_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::mode_ii.

    To avoid accidental use of raw pointers, doa::mode_ii's constructor is in a private implementation class. doa::mode_ii::make is the public interface for creating new instances.

    Args:
        vector_size : 
        max_value : 
    """
    return _doa_swig.mode_ii_make(vector_size, max_value)

class mode_ii_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::mode_ii > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(mode_ii_sptr self) -> mode_ii_sptr
        __init__(mode_ii_sptr self, mode_ii p) -> mode_ii_sptr
        """
        _doa_swig.mode_ii_sptr_swiginit(self, _doa_swig.new_mode_ii_sptr(*args))

    def __deref__(self) -> "gr::doa::mode_ii *":
        r"""__deref__(mode_ii_sptr self) -> mode_ii"""
        return _doa_swig.mode_ii_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_mode_ii_sptr

    def make(self, vector_size: "int", max_value: "int") -> "gr::doa::mode_ii::sptr":
        r"""
        make(mode_ii_sptr self, int vector_size, int max_value) -> mode_ii_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::mode_ii.

        To avoid accidental use of raw pointers, doa::mode_ii's constructor is in a private implementation class. doa::mode_ii::make is the public interface for creating new instances.

        Args:
            vector_size : 
            max_value : 
        """
        return _doa_swig.mode_ii_sptr_make(self, vector_size, max_value)

    def history(self) -> "unsigned int":
        r"""history(mode_ii_sptr self) -> unsigned int"""
        return _doa_swig.mode_ii_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(mode_ii_sptr self, int which, int delay)
        declare_sample_delay(mode_ii_sptr self, unsigned int delay)
        """
        return _doa_swig.mode_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(mode_ii_sptr self, int which) -> unsigned int"""
        return _doa_swig.mode_ii_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(mode_ii_sptr self, int multiple)"""
        return _doa_swig.mode_ii_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(mode_ii_sptr self) -> int"""
        return _doa_swig.mode_ii_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(mode_ii_sptr self) -> double"""
        return _doa_swig.mode_ii_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(mode_ii_sptr self) -> uint64_t"""
        return _doa_swig.mode_ii_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(mode_ii_sptr self) -> uint64_t"""
        return _doa_swig.mode_ii_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(mode_ii_sptr self) -> bool"""
        return _doa_swig.mode_ii_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(mode_ii_sptr self) -> bool"""
        return _doa_swig.mode_ii_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(mode_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.mode_ii_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(mode_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.mode_ii_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(mode_ii_sptr self, std::string level)"""
        return _doa_swig.mode_ii_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(mode_ii_sptr self) -> std::string"""
        return _doa_swig.mode_ii_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(mode_ii_sptr self) -> int"""
        return _doa_swig.mode_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(mode_ii_sptr self, int m)"""
        return _doa_swig.mode_ii_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(mode_ii_sptr self)"""
        return _doa_swig.mode_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(mode_ii_sptr self) -> bool"""
        return _doa_swig.mode_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(mode_ii_sptr self, int m)"""
        return _doa_swig.mode_ii_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(mode_ii_sptr self) -> int"""
        return _doa_swig.mode_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(mode_ii_sptr self, int i) -> long"""
        return _doa_swig.mode_ii_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(mode_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(mode_ii_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.mode_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(mode_ii_sptr self, int i) -> long"""
        return _doa_swig.mode_ii_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(mode_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(mode_ii_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.mode_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(mode_ii_sptr self) -> float"""
        return _doa_swig.mode_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(mode_ii_sptr self) -> float"""
        return _doa_swig.mode_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(mode_ii_sptr self) -> float"""
        return _doa_swig.mode_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(mode_ii_sptr self) -> float"""
        return _doa_swig.mode_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(mode_ii_sptr self) -> float"""
        return _doa_swig.mode_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(mode_ii_sptr self) -> float"""
        return _doa_swig.mode_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(mode_ii_sptr self, int which) -> float
        pc_input_buffers_full(mode_ii_sptr self) -> pmt_vector_float
        """
        return _doa_swig.mode_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(mode_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(mode_ii_sptr self) -> pmt_vector_float
        """
        return _doa_swig.mode_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(mode_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(mode_ii_sptr self) -> pmt_vector_float
        """
        return _doa_swig.mode_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(mode_ii_sptr self, int which) -> float
        pc_output_buffers_full(mode_ii_sptr self) -> pmt_vector_float
        """
        return _doa_swig.mode_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(mode_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(mode_ii_sptr self) -> pmt_vector_float
        """
        return _doa_swig.mode_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(mode_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(mode_ii_sptr self) -> pmt_vector_float
        """
        return _doa_swig.mode_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(mode_ii_sptr self) -> float"""
        return _doa_swig.mode_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(mode_ii_sptr self) -> float"""
        return _doa_swig.mode_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(mode_ii_sptr self) -> float"""
        return _doa_swig.mode_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(mode_ii_sptr self) -> float"""
        return _doa_swig.mode_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(mode_ii_sptr self) -> float"""
        return _doa_swig.mode_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(mode_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.mode_ii_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(mode_ii_sptr self)"""
        return _doa_swig.mode_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(mode_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.mode_ii_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(mode_ii_sptr self) -> int"""
        return _doa_swig.mode_ii_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(mode_ii_sptr self) -> int"""
        return _doa_swig.mode_ii_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(mode_ii_sptr self, int priority) -> int"""
        return _doa_swig.mode_ii_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(mode_ii_sptr self) -> std::string"""
        return _doa_swig.mode_ii_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(mode_ii_sptr self) -> std::string"""
        return _doa_swig.mode_ii_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(mode_ii_sptr self) -> io_signature_sptr"""
        return _doa_swig.mode_ii_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(mode_ii_sptr self) -> io_signature_sptr"""
        return _doa_swig.mode_ii_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(mode_ii_sptr self) -> long"""
        return _doa_swig.mode_ii_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(mode_ii_sptr self) -> basic_block_sptr"""
        return _doa_swig.mode_ii_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(mode_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.mode_ii_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(mode_ii_sptr self) -> std::string"""
        return _doa_swig.mode_ii_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(mode_ii_sptr self, std::string name)"""
        return _doa_swig.mode_ii_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(mode_ii_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.mode_ii_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(mode_ii_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.mode_ii_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(mode_ii_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.mode_ii_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(mode_ii_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.mode_ii_sptr_message_subscribers(self, which_port)

# Register mode_ii_sptr in _doa_swig:
_doa_swig.mode_ii_sptr_swigregister(mode_ii_sptr)


mode_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mode_ii = mode_ii.make;

class lin_delay_cc(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::lin_delay_cc.

    To avoid accidental use of raw pointers, doa::lin_delay_cc's constructor is in a private implementation class. doa::lin_delay_cc::make is the public interface for creating new instances.

    Args:
        samp_rate : 
        delay : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(samp_rate: "int", delay: "float") -> "gr::doa::lin_delay_cc::sptr":
        r"""
        make(int samp_rate, float delay) -> lin_delay_cc_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::lin_delay_cc.

        To avoid accidental use of raw pointers, doa::lin_delay_cc's constructor is in a private implementation class. doa::lin_delay_cc::make is the public interface for creating new instances.

        Args:
            samp_rate : 
            delay : 
        """
        return _doa_swig.lin_delay_cc_make(samp_rate, delay)

    def dly(self) -> "float":
        r"""dly(lin_delay_cc self) -> float"""
        return _doa_swig.lin_delay_cc_dly(self)

    def set_dly(self, new_delay: "float") -> "void":
        r"""set_dly(lin_delay_cc self, float new_delay)"""
        return _doa_swig.lin_delay_cc_set_dly(self, new_delay)
    __swig_destroy__ = _doa_swig.delete_lin_delay_cc

# Register lin_delay_cc in _doa_swig:
_doa_swig.lin_delay_cc_swigregister(lin_delay_cc)

def lin_delay_cc_make(samp_rate: "int", delay: "float") -> "gr::doa::lin_delay_cc::sptr":
    r"""
    lin_delay_cc_make(int samp_rate, float delay) -> lin_delay_cc_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::lin_delay_cc.

    To avoid accidental use of raw pointers, doa::lin_delay_cc's constructor is in a private implementation class. doa::lin_delay_cc::make is the public interface for creating new instances.

    Args:
        samp_rate : 
        delay : 
    """
    return _doa_swig.lin_delay_cc_make(samp_rate, delay)

class lin_delay_cc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::lin_delay_cc > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(lin_delay_cc_sptr self) -> lin_delay_cc_sptr
        __init__(lin_delay_cc_sptr self, lin_delay_cc p) -> lin_delay_cc_sptr
        """
        _doa_swig.lin_delay_cc_sptr_swiginit(self, _doa_swig.new_lin_delay_cc_sptr(*args))

    def __deref__(self) -> "gr::doa::lin_delay_cc *":
        r"""__deref__(lin_delay_cc_sptr self) -> lin_delay_cc"""
        return _doa_swig.lin_delay_cc_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_lin_delay_cc_sptr

    def make(self, samp_rate: "int", delay: "float") -> "gr::doa::lin_delay_cc::sptr":
        r"""
        make(lin_delay_cc_sptr self, int samp_rate, float delay) -> lin_delay_cc_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::lin_delay_cc.

        To avoid accidental use of raw pointers, doa::lin_delay_cc's constructor is in a private implementation class. doa::lin_delay_cc::make is the public interface for creating new instances.

        Args:
            samp_rate : 
            delay : 
        """
        return _doa_swig.lin_delay_cc_sptr_make(self, samp_rate, delay)

    def dly(self) -> "float":
        r"""dly(lin_delay_cc_sptr self) -> float"""
        return _doa_swig.lin_delay_cc_sptr_dly(self)

    def set_dly(self, new_delay: "float") -> "void":
        r"""set_dly(lin_delay_cc_sptr self, float new_delay)"""
        return _doa_swig.lin_delay_cc_sptr_set_dly(self, new_delay)

    def history(self) -> "unsigned int":
        r"""history(lin_delay_cc_sptr self) -> unsigned int"""
        return _doa_swig.lin_delay_cc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(lin_delay_cc_sptr self, int which, int delay)
        declare_sample_delay(lin_delay_cc_sptr self, unsigned int delay)
        """
        return _doa_swig.lin_delay_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(lin_delay_cc_sptr self, int which) -> unsigned int"""
        return _doa_swig.lin_delay_cc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(lin_delay_cc_sptr self, int multiple)"""
        return _doa_swig.lin_delay_cc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(lin_delay_cc_sptr self) -> int"""
        return _doa_swig.lin_delay_cc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(lin_delay_cc_sptr self) -> double"""
        return _doa_swig.lin_delay_cc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(lin_delay_cc_sptr self) -> uint64_t"""
        return _doa_swig.lin_delay_cc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(lin_delay_cc_sptr self) -> uint64_t"""
        return _doa_swig.lin_delay_cc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(lin_delay_cc_sptr self) -> bool"""
        return _doa_swig.lin_delay_cc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(lin_delay_cc_sptr self) -> bool"""
        return _doa_swig.lin_delay_cc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(lin_delay_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.lin_delay_cc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(lin_delay_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.lin_delay_cc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(lin_delay_cc_sptr self, std::string level)"""
        return _doa_swig.lin_delay_cc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(lin_delay_cc_sptr self) -> std::string"""
        return _doa_swig.lin_delay_cc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(lin_delay_cc_sptr self) -> int"""
        return _doa_swig.lin_delay_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(lin_delay_cc_sptr self, int m)"""
        return _doa_swig.lin_delay_cc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(lin_delay_cc_sptr self)"""
        return _doa_swig.lin_delay_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(lin_delay_cc_sptr self) -> bool"""
        return _doa_swig.lin_delay_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(lin_delay_cc_sptr self, int m)"""
        return _doa_swig.lin_delay_cc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(lin_delay_cc_sptr self) -> int"""
        return _doa_swig.lin_delay_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(lin_delay_cc_sptr self, int i) -> long"""
        return _doa_swig.lin_delay_cc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(lin_delay_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(lin_delay_cc_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.lin_delay_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(lin_delay_cc_sptr self, int i) -> long"""
        return _doa_swig.lin_delay_cc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(lin_delay_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(lin_delay_cc_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.lin_delay_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(lin_delay_cc_sptr self) -> float"""
        return _doa_swig.lin_delay_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(lin_delay_cc_sptr self) -> float"""
        return _doa_swig.lin_delay_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(lin_delay_cc_sptr self) -> float"""
        return _doa_swig.lin_delay_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(lin_delay_cc_sptr self) -> float"""
        return _doa_swig.lin_delay_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(lin_delay_cc_sptr self) -> float"""
        return _doa_swig.lin_delay_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(lin_delay_cc_sptr self) -> float"""
        return _doa_swig.lin_delay_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(lin_delay_cc_sptr self, int which) -> float
        pc_input_buffers_full(lin_delay_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.lin_delay_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(lin_delay_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(lin_delay_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.lin_delay_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(lin_delay_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(lin_delay_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.lin_delay_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(lin_delay_cc_sptr self, int which) -> float
        pc_output_buffers_full(lin_delay_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.lin_delay_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(lin_delay_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(lin_delay_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.lin_delay_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(lin_delay_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(lin_delay_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.lin_delay_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(lin_delay_cc_sptr self) -> float"""
        return _doa_swig.lin_delay_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(lin_delay_cc_sptr self) -> float"""
        return _doa_swig.lin_delay_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(lin_delay_cc_sptr self) -> float"""
        return _doa_swig.lin_delay_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(lin_delay_cc_sptr self) -> float"""
        return _doa_swig.lin_delay_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(lin_delay_cc_sptr self) -> float"""
        return _doa_swig.lin_delay_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(lin_delay_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.lin_delay_cc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(lin_delay_cc_sptr self)"""
        return _doa_swig.lin_delay_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(lin_delay_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.lin_delay_cc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(lin_delay_cc_sptr self) -> int"""
        return _doa_swig.lin_delay_cc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(lin_delay_cc_sptr self) -> int"""
        return _doa_swig.lin_delay_cc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(lin_delay_cc_sptr self, int priority) -> int"""
        return _doa_swig.lin_delay_cc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(lin_delay_cc_sptr self) -> std::string"""
        return _doa_swig.lin_delay_cc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(lin_delay_cc_sptr self) -> std::string"""
        return _doa_swig.lin_delay_cc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(lin_delay_cc_sptr self) -> io_signature_sptr"""
        return _doa_swig.lin_delay_cc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(lin_delay_cc_sptr self) -> io_signature_sptr"""
        return _doa_swig.lin_delay_cc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(lin_delay_cc_sptr self) -> long"""
        return _doa_swig.lin_delay_cc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(lin_delay_cc_sptr self) -> basic_block_sptr"""
        return _doa_swig.lin_delay_cc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(lin_delay_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.lin_delay_cc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(lin_delay_cc_sptr self) -> std::string"""
        return _doa_swig.lin_delay_cc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(lin_delay_cc_sptr self, std::string name)"""
        return _doa_swig.lin_delay_cc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(lin_delay_cc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.lin_delay_cc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(lin_delay_cc_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.lin_delay_cc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(lin_delay_cc_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.lin_delay_cc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(lin_delay_cc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.lin_delay_cc_sptr_message_subscribers(self, which_port)

# Register lin_delay_cc_sptr in _doa_swig:
_doa_swig.lin_delay_cc_sptr_swigregister(lin_delay_cc_sptr)


lin_delay_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
lin_delay_cc = lin_delay_cc.make;

class peak_estimator_cif(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::peak_estimator_cif.

    To avoid accidental use of raw pointers, doa::peak_estimator_cif's constructor is in a private implementation class. doa::peak_estimator_cif::make is the public interface for creating new instances.

    Args:
        vector_len : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vector_len: "int") -> "gr::doa::peak_estimator_cif::sptr":
        r"""
        make(int vector_len) -> peak_estimator_cif_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::peak_estimator_cif.

        To avoid accidental use of raw pointers, doa::peak_estimator_cif's constructor is in a private implementation class. doa::peak_estimator_cif::make is the public interface for creating new instances.

        Args:
            vector_len : 
        """
        return _doa_swig.peak_estimator_cif_make(vector_len)
    __swig_destroy__ = _doa_swig.delete_peak_estimator_cif

# Register peak_estimator_cif in _doa_swig:
_doa_swig.peak_estimator_cif_swigregister(peak_estimator_cif)

def peak_estimator_cif_make(vector_len: "int") -> "gr::doa::peak_estimator_cif::sptr":
    r"""
    peak_estimator_cif_make(int vector_len) -> peak_estimator_cif_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::peak_estimator_cif.

    To avoid accidental use of raw pointers, doa::peak_estimator_cif's constructor is in a private implementation class. doa::peak_estimator_cif::make is the public interface for creating new instances.

    Args:
        vector_len : 
    """
    return _doa_swig.peak_estimator_cif_make(vector_len)

class peak_estimator_cif_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::peak_estimator_cif > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(peak_estimator_cif_sptr self) -> peak_estimator_cif_sptr
        __init__(peak_estimator_cif_sptr self, peak_estimator_cif p) -> peak_estimator_cif_sptr
        """
        _doa_swig.peak_estimator_cif_sptr_swiginit(self, _doa_swig.new_peak_estimator_cif_sptr(*args))

    def __deref__(self) -> "gr::doa::peak_estimator_cif *":
        r"""__deref__(peak_estimator_cif_sptr self) -> peak_estimator_cif"""
        return _doa_swig.peak_estimator_cif_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_peak_estimator_cif_sptr

    def make(self, vector_len: "int") -> "gr::doa::peak_estimator_cif::sptr":
        r"""
        make(peak_estimator_cif_sptr self, int vector_len) -> peak_estimator_cif_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::peak_estimator_cif.

        To avoid accidental use of raw pointers, doa::peak_estimator_cif's constructor is in a private implementation class. doa::peak_estimator_cif::make is the public interface for creating new instances.

        Args:
            vector_len : 
        """
        return _doa_swig.peak_estimator_cif_sptr_make(self, vector_len)

    def history(self) -> "unsigned int":
        r"""history(peak_estimator_cif_sptr self) -> unsigned int"""
        return _doa_swig.peak_estimator_cif_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(peak_estimator_cif_sptr self, int which, int delay)
        declare_sample_delay(peak_estimator_cif_sptr self, unsigned int delay)
        """
        return _doa_swig.peak_estimator_cif_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(peak_estimator_cif_sptr self, int which) -> unsigned int"""
        return _doa_swig.peak_estimator_cif_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(peak_estimator_cif_sptr self, int multiple)"""
        return _doa_swig.peak_estimator_cif_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(peak_estimator_cif_sptr self) -> int"""
        return _doa_swig.peak_estimator_cif_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(peak_estimator_cif_sptr self) -> double"""
        return _doa_swig.peak_estimator_cif_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(peak_estimator_cif_sptr self) -> uint64_t"""
        return _doa_swig.peak_estimator_cif_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(peak_estimator_cif_sptr self) -> uint64_t"""
        return _doa_swig.peak_estimator_cif_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(peak_estimator_cif_sptr self) -> bool"""
        return _doa_swig.peak_estimator_cif_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(peak_estimator_cif_sptr self) -> bool"""
        return _doa_swig.peak_estimator_cif_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(peak_estimator_cif_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.peak_estimator_cif_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(peak_estimator_cif_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.peak_estimator_cif_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(peak_estimator_cif_sptr self, std::string level)"""
        return _doa_swig.peak_estimator_cif_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(peak_estimator_cif_sptr self) -> std::string"""
        return _doa_swig.peak_estimator_cif_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(peak_estimator_cif_sptr self) -> int"""
        return _doa_swig.peak_estimator_cif_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(peak_estimator_cif_sptr self, int m)"""
        return _doa_swig.peak_estimator_cif_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(peak_estimator_cif_sptr self)"""
        return _doa_swig.peak_estimator_cif_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(peak_estimator_cif_sptr self) -> bool"""
        return _doa_swig.peak_estimator_cif_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(peak_estimator_cif_sptr self, int m)"""
        return _doa_swig.peak_estimator_cif_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(peak_estimator_cif_sptr self) -> int"""
        return _doa_swig.peak_estimator_cif_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(peak_estimator_cif_sptr self, int i) -> long"""
        return _doa_swig.peak_estimator_cif_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(peak_estimator_cif_sptr self, long max_output_buffer)
        set_max_output_buffer(peak_estimator_cif_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.peak_estimator_cif_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(peak_estimator_cif_sptr self, int i) -> long"""
        return _doa_swig.peak_estimator_cif_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(peak_estimator_cif_sptr self, long min_output_buffer)
        set_min_output_buffer(peak_estimator_cif_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.peak_estimator_cif_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(peak_estimator_cif_sptr self) -> float"""
        return _doa_swig.peak_estimator_cif_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(peak_estimator_cif_sptr self) -> float"""
        return _doa_swig.peak_estimator_cif_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(peak_estimator_cif_sptr self) -> float"""
        return _doa_swig.peak_estimator_cif_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(peak_estimator_cif_sptr self) -> float"""
        return _doa_swig.peak_estimator_cif_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(peak_estimator_cif_sptr self) -> float"""
        return _doa_swig.peak_estimator_cif_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(peak_estimator_cif_sptr self) -> float"""
        return _doa_swig.peak_estimator_cif_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(peak_estimator_cif_sptr self, int which) -> float
        pc_input_buffers_full(peak_estimator_cif_sptr self) -> pmt_vector_float
        """
        return _doa_swig.peak_estimator_cif_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(peak_estimator_cif_sptr self, int which) -> float
        pc_input_buffers_full_avg(peak_estimator_cif_sptr self) -> pmt_vector_float
        """
        return _doa_swig.peak_estimator_cif_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(peak_estimator_cif_sptr self, int which) -> float
        pc_input_buffers_full_var(peak_estimator_cif_sptr self) -> pmt_vector_float
        """
        return _doa_swig.peak_estimator_cif_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(peak_estimator_cif_sptr self, int which) -> float
        pc_output_buffers_full(peak_estimator_cif_sptr self) -> pmt_vector_float
        """
        return _doa_swig.peak_estimator_cif_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(peak_estimator_cif_sptr self, int which) -> float
        pc_output_buffers_full_avg(peak_estimator_cif_sptr self) -> pmt_vector_float
        """
        return _doa_swig.peak_estimator_cif_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(peak_estimator_cif_sptr self, int which) -> float
        pc_output_buffers_full_var(peak_estimator_cif_sptr self) -> pmt_vector_float
        """
        return _doa_swig.peak_estimator_cif_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(peak_estimator_cif_sptr self) -> float"""
        return _doa_swig.peak_estimator_cif_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(peak_estimator_cif_sptr self) -> float"""
        return _doa_swig.peak_estimator_cif_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(peak_estimator_cif_sptr self) -> float"""
        return _doa_swig.peak_estimator_cif_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(peak_estimator_cif_sptr self) -> float"""
        return _doa_swig.peak_estimator_cif_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(peak_estimator_cif_sptr self) -> float"""
        return _doa_swig.peak_estimator_cif_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(peak_estimator_cif_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.peak_estimator_cif_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(peak_estimator_cif_sptr self)"""
        return _doa_swig.peak_estimator_cif_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(peak_estimator_cif_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.peak_estimator_cif_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(peak_estimator_cif_sptr self) -> int"""
        return _doa_swig.peak_estimator_cif_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(peak_estimator_cif_sptr self) -> int"""
        return _doa_swig.peak_estimator_cif_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(peak_estimator_cif_sptr self, int priority) -> int"""
        return _doa_swig.peak_estimator_cif_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(peak_estimator_cif_sptr self) -> std::string"""
        return _doa_swig.peak_estimator_cif_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(peak_estimator_cif_sptr self) -> std::string"""
        return _doa_swig.peak_estimator_cif_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(peak_estimator_cif_sptr self) -> io_signature_sptr"""
        return _doa_swig.peak_estimator_cif_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(peak_estimator_cif_sptr self) -> io_signature_sptr"""
        return _doa_swig.peak_estimator_cif_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(peak_estimator_cif_sptr self) -> long"""
        return _doa_swig.peak_estimator_cif_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(peak_estimator_cif_sptr self) -> basic_block_sptr"""
        return _doa_swig.peak_estimator_cif_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(peak_estimator_cif_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.peak_estimator_cif_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(peak_estimator_cif_sptr self) -> std::string"""
        return _doa_swig.peak_estimator_cif_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(peak_estimator_cif_sptr self, std::string name)"""
        return _doa_swig.peak_estimator_cif_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(peak_estimator_cif_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.peak_estimator_cif_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(peak_estimator_cif_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.peak_estimator_cif_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(peak_estimator_cif_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.peak_estimator_cif_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(peak_estimator_cif_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.peak_estimator_cif_sptr_message_subscribers(self, which_port)

# Register peak_estimator_cif_sptr in _doa_swig:
_doa_swig.peak_estimator_cif_sptr_swigregister(peak_estimator_cif_sptr)


peak_estimator_cif_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
peak_estimator_cif = peak_estimator_cif.make;

class cub_delay_cc(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::cub_delay_cc.

    To avoid accidental use of raw pointers, doa::cub_delay_cc's constructor is in a private implementation class. doa::cub_delay_cc::make is the public interface for creating new instances.

    Args:
        samp_rate : 
        delay : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(samp_rate: "int", delay: "float") -> "gr::doa::cub_delay_cc::sptr":
        r"""
        make(int samp_rate, float delay) -> cub_delay_cc_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::cub_delay_cc.

        To avoid accidental use of raw pointers, doa::cub_delay_cc's constructor is in a private implementation class. doa::cub_delay_cc::make is the public interface for creating new instances.

        Args:
            samp_rate : 
            delay : 
        """
        return _doa_swig.cub_delay_cc_make(samp_rate, delay)

    def dly(self) -> "float":
        r"""dly(cub_delay_cc self) -> float"""
        return _doa_swig.cub_delay_cc_dly(self)

    def set_dly(self, new_delay: "float") -> "void":
        r"""set_dly(cub_delay_cc self, float new_delay)"""
        return _doa_swig.cub_delay_cc_set_dly(self, new_delay)
    __swig_destroy__ = _doa_swig.delete_cub_delay_cc

# Register cub_delay_cc in _doa_swig:
_doa_swig.cub_delay_cc_swigregister(cub_delay_cc)

def cub_delay_cc_make(samp_rate: "int", delay: "float") -> "gr::doa::cub_delay_cc::sptr":
    r"""
    cub_delay_cc_make(int samp_rate, float delay) -> cub_delay_cc_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::cub_delay_cc.

    To avoid accidental use of raw pointers, doa::cub_delay_cc's constructor is in a private implementation class. doa::cub_delay_cc::make is the public interface for creating new instances.

    Args:
        samp_rate : 
        delay : 
    """
    return _doa_swig.cub_delay_cc_make(samp_rate, delay)

class cub_delay_cc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::cub_delay_cc > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(cub_delay_cc_sptr self) -> cub_delay_cc_sptr
        __init__(cub_delay_cc_sptr self, cub_delay_cc p) -> cub_delay_cc_sptr
        """
        _doa_swig.cub_delay_cc_sptr_swiginit(self, _doa_swig.new_cub_delay_cc_sptr(*args))

    def __deref__(self) -> "gr::doa::cub_delay_cc *":
        r"""__deref__(cub_delay_cc_sptr self) -> cub_delay_cc"""
        return _doa_swig.cub_delay_cc_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_cub_delay_cc_sptr

    def make(self, samp_rate: "int", delay: "float") -> "gr::doa::cub_delay_cc::sptr":
        r"""
        make(cub_delay_cc_sptr self, int samp_rate, float delay) -> cub_delay_cc_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::cub_delay_cc.

        To avoid accidental use of raw pointers, doa::cub_delay_cc's constructor is in a private implementation class. doa::cub_delay_cc::make is the public interface for creating new instances.

        Args:
            samp_rate : 
            delay : 
        """
        return _doa_swig.cub_delay_cc_sptr_make(self, samp_rate, delay)

    def dly(self) -> "float":
        r"""dly(cub_delay_cc_sptr self) -> float"""
        return _doa_swig.cub_delay_cc_sptr_dly(self)

    def set_dly(self, new_delay: "float") -> "void":
        r"""set_dly(cub_delay_cc_sptr self, float new_delay)"""
        return _doa_swig.cub_delay_cc_sptr_set_dly(self, new_delay)

    def history(self) -> "unsigned int":
        r"""history(cub_delay_cc_sptr self) -> unsigned int"""
        return _doa_swig.cub_delay_cc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(cub_delay_cc_sptr self, int which, int delay)
        declare_sample_delay(cub_delay_cc_sptr self, unsigned int delay)
        """
        return _doa_swig.cub_delay_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(cub_delay_cc_sptr self, int which) -> unsigned int"""
        return _doa_swig.cub_delay_cc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(cub_delay_cc_sptr self, int multiple)"""
        return _doa_swig.cub_delay_cc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(cub_delay_cc_sptr self) -> int"""
        return _doa_swig.cub_delay_cc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(cub_delay_cc_sptr self) -> double"""
        return _doa_swig.cub_delay_cc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(cub_delay_cc_sptr self) -> uint64_t"""
        return _doa_swig.cub_delay_cc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(cub_delay_cc_sptr self) -> uint64_t"""
        return _doa_swig.cub_delay_cc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(cub_delay_cc_sptr self) -> bool"""
        return _doa_swig.cub_delay_cc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(cub_delay_cc_sptr self) -> bool"""
        return _doa_swig.cub_delay_cc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(cub_delay_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.cub_delay_cc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(cub_delay_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.cub_delay_cc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(cub_delay_cc_sptr self, std::string level)"""
        return _doa_swig.cub_delay_cc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(cub_delay_cc_sptr self) -> std::string"""
        return _doa_swig.cub_delay_cc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(cub_delay_cc_sptr self) -> int"""
        return _doa_swig.cub_delay_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(cub_delay_cc_sptr self, int m)"""
        return _doa_swig.cub_delay_cc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(cub_delay_cc_sptr self)"""
        return _doa_swig.cub_delay_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(cub_delay_cc_sptr self) -> bool"""
        return _doa_swig.cub_delay_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(cub_delay_cc_sptr self, int m)"""
        return _doa_swig.cub_delay_cc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(cub_delay_cc_sptr self) -> int"""
        return _doa_swig.cub_delay_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(cub_delay_cc_sptr self, int i) -> long"""
        return _doa_swig.cub_delay_cc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(cub_delay_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(cub_delay_cc_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.cub_delay_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(cub_delay_cc_sptr self, int i) -> long"""
        return _doa_swig.cub_delay_cc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(cub_delay_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(cub_delay_cc_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.cub_delay_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(cub_delay_cc_sptr self) -> float"""
        return _doa_swig.cub_delay_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(cub_delay_cc_sptr self) -> float"""
        return _doa_swig.cub_delay_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(cub_delay_cc_sptr self) -> float"""
        return _doa_swig.cub_delay_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(cub_delay_cc_sptr self) -> float"""
        return _doa_swig.cub_delay_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(cub_delay_cc_sptr self) -> float"""
        return _doa_swig.cub_delay_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(cub_delay_cc_sptr self) -> float"""
        return _doa_swig.cub_delay_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(cub_delay_cc_sptr self, int which) -> float
        pc_input_buffers_full(cub_delay_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.cub_delay_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(cub_delay_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(cub_delay_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.cub_delay_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(cub_delay_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(cub_delay_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.cub_delay_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(cub_delay_cc_sptr self, int which) -> float
        pc_output_buffers_full(cub_delay_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.cub_delay_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(cub_delay_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(cub_delay_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.cub_delay_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(cub_delay_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(cub_delay_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.cub_delay_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(cub_delay_cc_sptr self) -> float"""
        return _doa_swig.cub_delay_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(cub_delay_cc_sptr self) -> float"""
        return _doa_swig.cub_delay_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(cub_delay_cc_sptr self) -> float"""
        return _doa_swig.cub_delay_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(cub_delay_cc_sptr self) -> float"""
        return _doa_swig.cub_delay_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(cub_delay_cc_sptr self) -> float"""
        return _doa_swig.cub_delay_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(cub_delay_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.cub_delay_cc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(cub_delay_cc_sptr self)"""
        return _doa_swig.cub_delay_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(cub_delay_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.cub_delay_cc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(cub_delay_cc_sptr self) -> int"""
        return _doa_swig.cub_delay_cc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(cub_delay_cc_sptr self) -> int"""
        return _doa_swig.cub_delay_cc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(cub_delay_cc_sptr self, int priority) -> int"""
        return _doa_swig.cub_delay_cc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(cub_delay_cc_sptr self) -> std::string"""
        return _doa_swig.cub_delay_cc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(cub_delay_cc_sptr self) -> std::string"""
        return _doa_swig.cub_delay_cc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(cub_delay_cc_sptr self) -> io_signature_sptr"""
        return _doa_swig.cub_delay_cc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(cub_delay_cc_sptr self) -> io_signature_sptr"""
        return _doa_swig.cub_delay_cc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(cub_delay_cc_sptr self) -> long"""
        return _doa_swig.cub_delay_cc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(cub_delay_cc_sptr self) -> basic_block_sptr"""
        return _doa_swig.cub_delay_cc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(cub_delay_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.cub_delay_cc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(cub_delay_cc_sptr self) -> std::string"""
        return _doa_swig.cub_delay_cc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(cub_delay_cc_sptr self, std::string name)"""
        return _doa_swig.cub_delay_cc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(cub_delay_cc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.cub_delay_cc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(cub_delay_cc_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.cub_delay_cc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(cub_delay_cc_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.cub_delay_cc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(cub_delay_cc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.cub_delay_cc_sptr_message_subscribers(self, which_port)

# Register cub_delay_cc_sptr in _doa_swig:
_doa_swig.cub_delay_cc_sptr_swigregister(cub_delay_cc_sptr)


cub_delay_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
cub_delay_cc = cub_delay_cc.make;

class cumulative_ff(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::cumulative_ff.

    To avoid accidental use of raw pointers, doa::cumulative_ff's constructor is in a private implementation class. doa::cumulative_ff::make is the public interface for creating new instances.

    Args:
        start : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(start: "float") -> "gr::doa::cumulative_ff::sptr":
        r"""
        make(float start) -> cumulative_ff_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::cumulative_ff.

        To avoid accidental use of raw pointers, doa::cumulative_ff's constructor is in a private implementation class. doa::cumulative_ff::make is the public interface for creating new instances.

        Args:
            start : 
        """
        return _doa_swig.cumulative_ff_make(start)
    __swig_destroy__ = _doa_swig.delete_cumulative_ff

# Register cumulative_ff in _doa_swig:
_doa_swig.cumulative_ff_swigregister(cumulative_ff)

def cumulative_ff_make(start: "float") -> "gr::doa::cumulative_ff::sptr":
    r"""
    cumulative_ff_make(float start) -> cumulative_ff_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::cumulative_ff.

    To avoid accidental use of raw pointers, doa::cumulative_ff's constructor is in a private implementation class. doa::cumulative_ff::make is the public interface for creating new instances.

    Args:
        start : 
    """
    return _doa_swig.cumulative_ff_make(start)

class cumulative_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::cumulative_ff > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(cumulative_ff_sptr self) -> cumulative_ff_sptr
        __init__(cumulative_ff_sptr self, cumulative_ff p) -> cumulative_ff_sptr
        """
        _doa_swig.cumulative_ff_sptr_swiginit(self, _doa_swig.new_cumulative_ff_sptr(*args))

    def __deref__(self) -> "gr::doa::cumulative_ff *":
        r"""__deref__(cumulative_ff_sptr self) -> cumulative_ff"""
        return _doa_swig.cumulative_ff_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_cumulative_ff_sptr

    def make(self, start: "float") -> "gr::doa::cumulative_ff::sptr":
        r"""
        make(cumulative_ff_sptr self, float start) -> cumulative_ff_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::cumulative_ff.

        To avoid accidental use of raw pointers, doa::cumulative_ff's constructor is in a private implementation class. doa::cumulative_ff::make is the public interface for creating new instances.

        Args:
            start : 
        """
        return _doa_swig.cumulative_ff_sptr_make(self, start)

    def history(self) -> "unsigned int":
        r"""history(cumulative_ff_sptr self) -> unsigned int"""
        return _doa_swig.cumulative_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(cumulative_ff_sptr self, int which, int delay)
        declare_sample_delay(cumulative_ff_sptr self, unsigned int delay)
        """
        return _doa_swig.cumulative_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(cumulative_ff_sptr self, int which) -> unsigned int"""
        return _doa_swig.cumulative_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(cumulative_ff_sptr self, int multiple)"""
        return _doa_swig.cumulative_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(cumulative_ff_sptr self) -> int"""
        return _doa_swig.cumulative_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(cumulative_ff_sptr self) -> double"""
        return _doa_swig.cumulative_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(cumulative_ff_sptr self) -> uint64_t"""
        return _doa_swig.cumulative_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(cumulative_ff_sptr self) -> uint64_t"""
        return _doa_swig.cumulative_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(cumulative_ff_sptr self) -> bool"""
        return _doa_swig.cumulative_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(cumulative_ff_sptr self) -> bool"""
        return _doa_swig.cumulative_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(cumulative_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.cumulative_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(cumulative_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.cumulative_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(cumulative_ff_sptr self, std::string level)"""
        return _doa_swig.cumulative_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(cumulative_ff_sptr self) -> std::string"""
        return _doa_swig.cumulative_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(cumulative_ff_sptr self) -> int"""
        return _doa_swig.cumulative_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(cumulative_ff_sptr self, int m)"""
        return _doa_swig.cumulative_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(cumulative_ff_sptr self)"""
        return _doa_swig.cumulative_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(cumulative_ff_sptr self) -> bool"""
        return _doa_swig.cumulative_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(cumulative_ff_sptr self, int m)"""
        return _doa_swig.cumulative_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(cumulative_ff_sptr self) -> int"""
        return _doa_swig.cumulative_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(cumulative_ff_sptr self, int i) -> long"""
        return _doa_swig.cumulative_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(cumulative_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(cumulative_ff_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.cumulative_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(cumulative_ff_sptr self, int i) -> long"""
        return _doa_swig.cumulative_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(cumulative_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(cumulative_ff_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.cumulative_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(cumulative_ff_sptr self) -> float"""
        return _doa_swig.cumulative_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(cumulative_ff_sptr self) -> float"""
        return _doa_swig.cumulative_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(cumulative_ff_sptr self) -> float"""
        return _doa_swig.cumulative_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(cumulative_ff_sptr self) -> float"""
        return _doa_swig.cumulative_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(cumulative_ff_sptr self) -> float"""
        return _doa_swig.cumulative_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(cumulative_ff_sptr self) -> float"""
        return _doa_swig.cumulative_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(cumulative_ff_sptr self, int which) -> float
        pc_input_buffers_full(cumulative_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.cumulative_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(cumulative_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(cumulative_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.cumulative_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(cumulative_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(cumulative_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.cumulative_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(cumulative_ff_sptr self, int which) -> float
        pc_output_buffers_full(cumulative_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.cumulative_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(cumulative_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(cumulative_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.cumulative_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(cumulative_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(cumulative_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.cumulative_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(cumulative_ff_sptr self) -> float"""
        return _doa_swig.cumulative_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(cumulative_ff_sptr self) -> float"""
        return _doa_swig.cumulative_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(cumulative_ff_sptr self) -> float"""
        return _doa_swig.cumulative_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(cumulative_ff_sptr self) -> float"""
        return _doa_swig.cumulative_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(cumulative_ff_sptr self) -> float"""
        return _doa_swig.cumulative_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(cumulative_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.cumulative_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(cumulative_ff_sptr self)"""
        return _doa_swig.cumulative_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(cumulative_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.cumulative_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(cumulative_ff_sptr self) -> int"""
        return _doa_swig.cumulative_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(cumulative_ff_sptr self) -> int"""
        return _doa_swig.cumulative_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(cumulative_ff_sptr self, int priority) -> int"""
        return _doa_swig.cumulative_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(cumulative_ff_sptr self) -> std::string"""
        return _doa_swig.cumulative_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(cumulative_ff_sptr self) -> std::string"""
        return _doa_swig.cumulative_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(cumulative_ff_sptr self) -> io_signature_sptr"""
        return _doa_swig.cumulative_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(cumulative_ff_sptr self) -> io_signature_sptr"""
        return _doa_swig.cumulative_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(cumulative_ff_sptr self) -> long"""
        return _doa_swig.cumulative_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(cumulative_ff_sptr self) -> basic_block_sptr"""
        return _doa_swig.cumulative_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(cumulative_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.cumulative_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(cumulative_ff_sptr self) -> std::string"""
        return _doa_swig.cumulative_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(cumulative_ff_sptr self, std::string name)"""
        return _doa_swig.cumulative_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(cumulative_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.cumulative_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(cumulative_ff_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.cumulative_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(cumulative_ff_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.cumulative_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(cumulative_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.cumulative_ff_sptr_message_subscribers(self, which_port)

# Register cumulative_ff_sptr in _doa_swig:
_doa_swig.cumulative_ff_sptr_swigregister(cumulative_ff_sptr)


cumulative_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
cumulative_ff = cumulative_ff.make;

class variance_ff(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::variance_ff.

    To avoid accidental use of raw pointers, doa::variance_ff's constructor is in a private implementation class. doa::variance_ff::make is the public interface for creating new instances.

    Args:
        vec_len : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vec_len: "int") -> "gr::doa::variance_ff::sptr":
        r"""
        make(int vec_len) -> variance_ff_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::variance_ff.

        To avoid accidental use of raw pointers, doa::variance_ff's constructor is in a private implementation class. doa::variance_ff::make is the public interface for creating new instances.

        Args:
            vec_len : 
        """
        return _doa_swig.variance_ff_make(vec_len)
    __swig_destroy__ = _doa_swig.delete_variance_ff

# Register variance_ff in _doa_swig:
_doa_swig.variance_ff_swigregister(variance_ff)

def variance_ff_make(vec_len: "int") -> "gr::doa::variance_ff::sptr":
    r"""
    variance_ff_make(int vec_len) -> variance_ff_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::variance_ff.

    To avoid accidental use of raw pointers, doa::variance_ff's constructor is in a private implementation class. doa::variance_ff::make is the public interface for creating new instances.

    Args:
        vec_len : 
    """
    return _doa_swig.variance_ff_make(vec_len)

class variance_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::variance_ff > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(variance_ff_sptr self) -> variance_ff_sptr
        __init__(variance_ff_sptr self, variance_ff p) -> variance_ff_sptr
        """
        _doa_swig.variance_ff_sptr_swiginit(self, _doa_swig.new_variance_ff_sptr(*args))

    def __deref__(self) -> "gr::doa::variance_ff *":
        r"""__deref__(variance_ff_sptr self) -> variance_ff"""
        return _doa_swig.variance_ff_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_variance_ff_sptr

    def make(self, vec_len: "int") -> "gr::doa::variance_ff::sptr":
        r"""
        make(variance_ff_sptr self, int vec_len) -> variance_ff_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::variance_ff.

        To avoid accidental use of raw pointers, doa::variance_ff's constructor is in a private implementation class. doa::variance_ff::make is the public interface for creating new instances.

        Args:
            vec_len : 
        """
        return _doa_swig.variance_ff_sptr_make(self, vec_len)

    def history(self) -> "unsigned int":
        r"""history(variance_ff_sptr self) -> unsigned int"""
        return _doa_swig.variance_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(variance_ff_sptr self, int which, int delay)
        declare_sample_delay(variance_ff_sptr self, unsigned int delay)
        """
        return _doa_swig.variance_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(variance_ff_sptr self, int which) -> unsigned int"""
        return _doa_swig.variance_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(variance_ff_sptr self, int multiple)"""
        return _doa_swig.variance_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(variance_ff_sptr self) -> int"""
        return _doa_swig.variance_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(variance_ff_sptr self) -> double"""
        return _doa_swig.variance_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(variance_ff_sptr self) -> uint64_t"""
        return _doa_swig.variance_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(variance_ff_sptr self) -> uint64_t"""
        return _doa_swig.variance_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(variance_ff_sptr self) -> bool"""
        return _doa_swig.variance_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(variance_ff_sptr self) -> bool"""
        return _doa_swig.variance_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(variance_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.variance_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(variance_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.variance_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(variance_ff_sptr self, std::string level)"""
        return _doa_swig.variance_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(variance_ff_sptr self) -> std::string"""
        return _doa_swig.variance_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(variance_ff_sptr self) -> int"""
        return _doa_swig.variance_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(variance_ff_sptr self, int m)"""
        return _doa_swig.variance_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(variance_ff_sptr self)"""
        return _doa_swig.variance_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(variance_ff_sptr self) -> bool"""
        return _doa_swig.variance_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(variance_ff_sptr self, int m)"""
        return _doa_swig.variance_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(variance_ff_sptr self) -> int"""
        return _doa_swig.variance_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(variance_ff_sptr self, int i) -> long"""
        return _doa_swig.variance_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(variance_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(variance_ff_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.variance_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(variance_ff_sptr self, int i) -> long"""
        return _doa_swig.variance_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(variance_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(variance_ff_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.variance_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(variance_ff_sptr self) -> float"""
        return _doa_swig.variance_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(variance_ff_sptr self) -> float"""
        return _doa_swig.variance_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(variance_ff_sptr self) -> float"""
        return _doa_swig.variance_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(variance_ff_sptr self) -> float"""
        return _doa_swig.variance_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(variance_ff_sptr self) -> float"""
        return _doa_swig.variance_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(variance_ff_sptr self) -> float"""
        return _doa_swig.variance_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(variance_ff_sptr self, int which) -> float
        pc_input_buffers_full(variance_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.variance_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(variance_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(variance_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.variance_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(variance_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(variance_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.variance_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(variance_ff_sptr self, int which) -> float
        pc_output_buffers_full(variance_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.variance_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(variance_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(variance_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.variance_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(variance_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(variance_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.variance_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(variance_ff_sptr self) -> float"""
        return _doa_swig.variance_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(variance_ff_sptr self) -> float"""
        return _doa_swig.variance_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(variance_ff_sptr self) -> float"""
        return _doa_swig.variance_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(variance_ff_sptr self) -> float"""
        return _doa_swig.variance_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(variance_ff_sptr self) -> float"""
        return _doa_swig.variance_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(variance_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.variance_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(variance_ff_sptr self)"""
        return _doa_swig.variance_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(variance_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.variance_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(variance_ff_sptr self) -> int"""
        return _doa_swig.variance_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(variance_ff_sptr self) -> int"""
        return _doa_swig.variance_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(variance_ff_sptr self, int priority) -> int"""
        return _doa_swig.variance_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(variance_ff_sptr self) -> std::string"""
        return _doa_swig.variance_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(variance_ff_sptr self) -> std::string"""
        return _doa_swig.variance_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(variance_ff_sptr self) -> io_signature_sptr"""
        return _doa_swig.variance_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(variance_ff_sptr self) -> io_signature_sptr"""
        return _doa_swig.variance_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(variance_ff_sptr self) -> long"""
        return _doa_swig.variance_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(variance_ff_sptr self) -> basic_block_sptr"""
        return _doa_swig.variance_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(variance_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.variance_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(variance_ff_sptr self) -> std::string"""
        return _doa_swig.variance_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(variance_ff_sptr self, std::string name)"""
        return _doa_swig.variance_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(variance_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.variance_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(variance_ff_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.variance_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(variance_ff_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.variance_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(variance_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.variance_ff_sptr_message_subscribers(self, which_port)

# Register variance_ff_sptr in _doa_swig:
_doa_swig.variance_ff_sptr_swigregister(variance_ff_sptr)


variance_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
variance_ff = variance_ff.make;

class zero_pad_cc(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::zero_pad_cc.

    To avoid accidental use of raw pointers, doa::zero_pad_cc's constructor is in a private implementation class. doa::zero_pad_cc::make is the public interface for creating new instances.

    Args:
        vec_len_in : 
        vec_len_out : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vec_len_in: "int", vec_len_out: "int") -> "gr::doa::zero_pad_cc::sptr":
        r"""
        make(int vec_len_in, int vec_len_out) -> zero_pad_cc_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::zero_pad_cc.

        To avoid accidental use of raw pointers, doa::zero_pad_cc's constructor is in a private implementation class. doa::zero_pad_cc::make is the public interface for creating new instances.

        Args:
            vec_len_in : 
            vec_len_out : 
        """
        return _doa_swig.zero_pad_cc_make(vec_len_in, vec_len_out)
    __swig_destroy__ = _doa_swig.delete_zero_pad_cc

# Register zero_pad_cc in _doa_swig:
_doa_swig.zero_pad_cc_swigregister(zero_pad_cc)

def zero_pad_cc_make(vec_len_in: "int", vec_len_out: "int") -> "gr::doa::zero_pad_cc::sptr":
    r"""
    zero_pad_cc_make(int vec_len_in, int vec_len_out) -> zero_pad_cc_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::zero_pad_cc.

    To avoid accidental use of raw pointers, doa::zero_pad_cc's constructor is in a private implementation class. doa::zero_pad_cc::make is the public interface for creating new instances.

    Args:
        vec_len_in : 
        vec_len_out : 
    """
    return _doa_swig.zero_pad_cc_make(vec_len_in, vec_len_out)

class zero_pad_cc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::zero_pad_cc > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(zero_pad_cc_sptr self) -> zero_pad_cc_sptr
        __init__(zero_pad_cc_sptr self, zero_pad_cc p) -> zero_pad_cc_sptr
        """
        _doa_swig.zero_pad_cc_sptr_swiginit(self, _doa_swig.new_zero_pad_cc_sptr(*args))

    def __deref__(self) -> "gr::doa::zero_pad_cc *":
        r"""__deref__(zero_pad_cc_sptr self) -> zero_pad_cc"""
        return _doa_swig.zero_pad_cc_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_zero_pad_cc_sptr

    def make(self, vec_len_in: "int", vec_len_out: "int") -> "gr::doa::zero_pad_cc::sptr":
        r"""
        make(zero_pad_cc_sptr self, int vec_len_in, int vec_len_out) -> zero_pad_cc_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::zero_pad_cc.

        To avoid accidental use of raw pointers, doa::zero_pad_cc's constructor is in a private implementation class. doa::zero_pad_cc::make is the public interface for creating new instances.

        Args:
            vec_len_in : 
            vec_len_out : 
        """
        return _doa_swig.zero_pad_cc_sptr_make(self, vec_len_in, vec_len_out)

    def history(self) -> "unsigned int":
        r"""history(zero_pad_cc_sptr self) -> unsigned int"""
        return _doa_swig.zero_pad_cc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(zero_pad_cc_sptr self, int which, int delay)
        declare_sample_delay(zero_pad_cc_sptr self, unsigned int delay)
        """
        return _doa_swig.zero_pad_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(zero_pad_cc_sptr self, int which) -> unsigned int"""
        return _doa_swig.zero_pad_cc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(zero_pad_cc_sptr self, int multiple)"""
        return _doa_swig.zero_pad_cc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(zero_pad_cc_sptr self) -> int"""
        return _doa_swig.zero_pad_cc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(zero_pad_cc_sptr self) -> double"""
        return _doa_swig.zero_pad_cc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(zero_pad_cc_sptr self) -> uint64_t"""
        return _doa_swig.zero_pad_cc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(zero_pad_cc_sptr self) -> uint64_t"""
        return _doa_swig.zero_pad_cc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(zero_pad_cc_sptr self) -> bool"""
        return _doa_swig.zero_pad_cc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(zero_pad_cc_sptr self) -> bool"""
        return _doa_swig.zero_pad_cc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(zero_pad_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.zero_pad_cc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(zero_pad_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.zero_pad_cc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(zero_pad_cc_sptr self, std::string level)"""
        return _doa_swig.zero_pad_cc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(zero_pad_cc_sptr self) -> std::string"""
        return _doa_swig.zero_pad_cc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(zero_pad_cc_sptr self) -> int"""
        return _doa_swig.zero_pad_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(zero_pad_cc_sptr self, int m)"""
        return _doa_swig.zero_pad_cc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(zero_pad_cc_sptr self)"""
        return _doa_swig.zero_pad_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(zero_pad_cc_sptr self) -> bool"""
        return _doa_swig.zero_pad_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(zero_pad_cc_sptr self, int m)"""
        return _doa_swig.zero_pad_cc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(zero_pad_cc_sptr self) -> int"""
        return _doa_swig.zero_pad_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(zero_pad_cc_sptr self, int i) -> long"""
        return _doa_swig.zero_pad_cc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(zero_pad_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(zero_pad_cc_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.zero_pad_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(zero_pad_cc_sptr self, int i) -> long"""
        return _doa_swig.zero_pad_cc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(zero_pad_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(zero_pad_cc_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.zero_pad_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(zero_pad_cc_sptr self) -> float"""
        return _doa_swig.zero_pad_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(zero_pad_cc_sptr self) -> float"""
        return _doa_swig.zero_pad_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(zero_pad_cc_sptr self) -> float"""
        return _doa_swig.zero_pad_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(zero_pad_cc_sptr self) -> float"""
        return _doa_swig.zero_pad_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(zero_pad_cc_sptr self) -> float"""
        return _doa_swig.zero_pad_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(zero_pad_cc_sptr self) -> float"""
        return _doa_swig.zero_pad_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(zero_pad_cc_sptr self, int which) -> float
        pc_input_buffers_full(zero_pad_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.zero_pad_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(zero_pad_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(zero_pad_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.zero_pad_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(zero_pad_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(zero_pad_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.zero_pad_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(zero_pad_cc_sptr self, int which) -> float
        pc_output_buffers_full(zero_pad_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.zero_pad_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(zero_pad_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(zero_pad_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.zero_pad_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(zero_pad_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(zero_pad_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.zero_pad_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(zero_pad_cc_sptr self) -> float"""
        return _doa_swig.zero_pad_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(zero_pad_cc_sptr self) -> float"""
        return _doa_swig.zero_pad_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(zero_pad_cc_sptr self) -> float"""
        return _doa_swig.zero_pad_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(zero_pad_cc_sptr self) -> float"""
        return _doa_swig.zero_pad_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(zero_pad_cc_sptr self) -> float"""
        return _doa_swig.zero_pad_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(zero_pad_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.zero_pad_cc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(zero_pad_cc_sptr self)"""
        return _doa_swig.zero_pad_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(zero_pad_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.zero_pad_cc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(zero_pad_cc_sptr self) -> int"""
        return _doa_swig.zero_pad_cc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(zero_pad_cc_sptr self) -> int"""
        return _doa_swig.zero_pad_cc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(zero_pad_cc_sptr self, int priority) -> int"""
        return _doa_swig.zero_pad_cc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(zero_pad_cc_sptr self) -> std::string"""
        return _doa_swig.zero_pad_cc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(zero_pad_cc_sptr self) -> std::string"""
        return _doa_swig.zero_pad_cc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(zero_pad_cc_sptr self) -> io_signature_sptr"""
        return _doa_swig.zero_pad_cc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(zero_pad_cc_sptr self) -> io_signature_sptr"""
        return _doa_swig.zero_pad_cc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(zero_pad_cc_sptr self) -> long"""
        return _doa_swig.zero_pad_cc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(zero_pad_cc_sptr self) -> basic_block_sptr"""
        return _doa_swig.zero_pad_cc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(zero_pad_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.zero_pad_cc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(zero_pad_cc_sptr self) -> std::string"""
        return _doa_swig.zero_pad_cc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(zero_pad_cc_sptr self, std::string name)"""
        return _doa_swig.zero_pad_cc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(zero_pad_cc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.zero_pad_cc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(zero_pad_cc_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.zero_pad_cc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(zero_pad_cc_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.zero_pad_cc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(zero_pad_cc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.zero_pad_cc_sptr_message_subscribers(self, which_port)

# Register zero_pad_cc_sptr in _doa_swig:
_doa_swig.zero_pad_cc_sptr_swigregister(zero_pad_cc_sptr)


zero_pad_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
zero_pad_cc = zero_pad_cc.make;

class sample_offset_cci(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::sample_offset_cci.

    To avoid accidental use of raw pointers, doa::sample_offset_cci's constructor is in a private implementation class. doa::sample_offset_cci::make is the public interface for creating new instances.

    Args:
        vector_len : 
        num_xcorr : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vector_len: "int", num_xcorr: "int") -> "gr::doa::sample_offset_cci::sptr":
        r"""
        make(int vector_len, int num_xcorr) -> sample_offset_cci_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::sample_offset_cci.

        To avoid accidental use of raw pointers, doa::sample_offset_cci's constructor is in a private implementation class. doa::sample_offset_cci::make is the public interface for creating new instances.

        Args:
            vector_len : 
            num_xcorr : 
        """
        return _doa_swig.sample_offset_cci_make(vector_len, num_xcorr)
    __swig_destroy__ = _doa_swig.delete_sample_offset_cci

# Register sample_offset_cci in _doa_swig:
_doa_swig.sample_offset_cci_swigregister(sample_offset_cci)

def sample_offset_cci_make(vector_len: "int", num_xcorr: "int") -> "gr::doa::sample_offset_cci::sptr":
    r"""
    sample_offset_cci_make(int vector_len, int num_xcorr) -> sample_offset_cci_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::sample_offset_cci.

    To avoid accidental use of raw pointers, doa::sample_offset_cci's constructor is in a private implementation class. doa::sample_offset_cci::make is the public interface for creating new instances.

    Args:
        vector_len : 
        num_xcorr : 
    """
    return _doa_swig.sample_offset_cci_make(vector_len, num_xcorr)

class sample_offset_cci_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::sample_offset_cci > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(sample_offset_cci_sptr self) -> sample_offset_cci_sptr
        __init__(sample_offset_cci_sptr self, sample_offset_cci p) -> sample_offset_cci_sptr
        """
        _doa_swig.sample_offset_cci_sptr_swiginit(self, _doa_swig.new_sample_offset_cci_sptr(*args))

    def __deref__(self) -> "gr::doa::sample_offset_cci *":
        r"""__deref__(sample_offset_cci_sptr self) -> sample_offset_cci"""
        return _doa_swig.sample_offset_cci_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_sample_offset_cci_sptr

    def make(self, vector_len: "int", num_xcorr: "int") -> "gr::doa::sample_offset_cci::sptr":
        r"""
        make(sample_offset_cci_sptr self, int vector_len, int num_xcorr) -> sample_offset_cci_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::sample_offset_cci.

        To avoid accidental use of raw pointers, doa::sample_offset_cci's constructor is in a private implementation class. doa::sample_offset_cci::make is the public interface for creating new instances.

        Args:
            vector_len : 
            num_xcorr : 
        """
        return _doa_swig.sample_offset_cci_sptr_make(self, vector_len, num_xcorr)

    def history(self) -> "unsigned int":
        r"""history(sample_offset_cci_sptr self) -> unsigned int"""
        return _doa_swig.sample_offset_cci_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(sample_offset_cci_sptr self, int which, int delay)
        declare_sample_delay(sample_offset_cci_sptr self, unsigned int delay)
        """
        return _doa_swig.sample_offset_cci_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(sample_offset_cci_sptr self, int which) -> unsigned int"""
        return _doa_swig.sample_offset_cci_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(sample_offset_cci_sptr self, int multiple)"""
        return _doa_swig.sample_offset_cci_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(sample_offset_cci_sptr self) -> int"""
        return _doa_swig.sample_offset_cci_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(sample_offset_cci_sptr self) -> double"""
        return _doa_swig.sample_offset_cci_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(sample_offset_cci_sptr self) -> uint64_t"""
        return _doa_swig.sample_offset_cci_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(sample_offset_cci_sptr self) -> uint64_t"""
        return _doa_swig.sample_offset_cci_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(sample_offset_cci_sptr self) -> bool"""
        return _doa_swig.sample_offset_cci_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(sample_offset_cci_sptr self) -> bool"""
        return _doa_swig.sample_offset_cci_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(sample_offset_cci_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.sample_offset_cci_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(sample_offset_cci_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.sample_offset_cci_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(sample_offset_cci_sptr self, std::string level)"""
        return _doa_swig.sample_offset_cci_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(sample_offset_cci_sptr self) -> std::string"""
        return _doa_swig.sample_offset_cci_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(sample_offset_cci_sptr self) -> int"""
        return _doa_swig.sample_offset_cci_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(sample_offset_cci_sptr self, int m)"""
        return _doa_swig.sample_offset_cci_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(sample_offset_cci_sptr self)"""
        return _doa_swig.sample_offset_cci_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(sample_offset_cci_sptr self) -> bool"""
        return _doa_swig.sample_offset_cci_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(sample_offset_cci_sptr self, int m)"""
        return _doa_swig.sample_offset_cci_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(sample_offset_cci_sptr self) -> int"""
        return _doa_swig.sample_offset_cci_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(sample_offset_cci_sptr self, int i) -> long"""
        return _doa_swig.sample_offset_cci_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(sample_offset_cci_sptr self, long max_output_buffer)
        set_max_output_buffer(sample_offset_cci_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.sample_offset_cci_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(sample_offset_cci_sptr self, int i) -> long"""
        return _doa_swig.sample_offset_cci_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(sample_offset_cci_sptr self, long min_output_buffer)
        set_min_output_buffer(sample_offset_cci_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.sample_offset_cci_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(sample_offset_cci_sptr self) -> float"""
        return _doa_swig.sample_offset_cci_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(sample_offset_cci_sptr self) -> float"""
        return _doa_swig.sample_offset_cci_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(sample_offset_cci_sptr self) -> float"""
        return _doa_swig.sample_offset_cci_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(sample_offset_cci_sptr self) -> float"""
        return _doa_swig.sample_offset_cci_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(sample_offset_cci_sptr self) -> float"""
        return _doa_swig.sample_offset_cci_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(sample_offset_cci_sptr self) -> float"""
        return _doa_swig.sample_offset_cci_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(sample_offset_cci_sptr self, int which) -> float
        pc_input_buffers_full(sample_offset_cci_sptr self) -> pmt_vector_float
        """
        return _doa_swig.sample_offset_cci_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(sample_offset_cci_sptr self, int which) -> float
        pc_input_buffers_full_avg(sample_offset_cci_sptr self) -> pmt_vector_float
        """
        return _doa_swig.sample_offset_cci_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(sample_offset_cci_sptr self, int which) -> float
        pc_input_buffers_full_var(sample_offset_cci_sptr self) -> pmt_vector_float
        """
        return _doa_swig.sample_offset_cci_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(sample_offset_cci_sptr self, int which) -> float
        pc_output_buffers_full(sample_offset_cci_sptr self) -> pmt_vector_float
        """
        return _doa_swig.sample_offset_cci_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(sample_offset_cci_sptr self, int which) -> float
        pc_output_buffers_full_avg(sample_offset_cci_sptr self) -> pmt_vector_float
        """
        return _doa_swig.sample_offset_cci_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(sample_offset_cci_sptr self, int which) -> float
        pc_output_buffers_full_var(sample_offset_cci_sptr self) -> pmt_vector_float
        """
        return _doa_swig.sample_offset_cci_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(sample_offset_cci_sptr self) -> float"""
        return _doa_swig.sample_offset_cci_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(sample_offset_cci_sptr self) -> float"""
        return _doa_swig.sample_offset_cci_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(sample_offset_cci_sptr self) -> float"""
        return _doa_swig.sample_offset_cci_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(sample_offset_cci_sptr self) -> float"""
        return _doa_swig.sample_offset_cci_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(sample_offset_cci_sptr self) -> float"""
        return _doa_swig.sample_offset_cci_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(sample_offset_cci_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.sample_offset_cci_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(sample_offset_cci_sptr self)"""
        return _doa_swig.sample_offset_cci_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(sample_offset_cci_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.sample_offset_cci_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(sample_offset_cci_sptr self) -> int"""
        return _doa_swig.sample_offset_cci_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(sample_offset_cci_sptr self) -> int"""
        return _doa_swig.sample_offset_cci_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(sample_offset_cci_sptr self, int priority) -> int"""
        return _doa_swig.sample_offset_cci_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(sample_offset_cci_sptr self) -> std::string"""
        return _doa_swig.sample_offset_cci_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(sample_offset_cci_sptr self) -> std::string"""
        return _doa_swig.sample_offset_cci_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(sample_offset_cci_sptr self) -> io_signature_sptr"""
        return _doa_swig.sample_offset_cci_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(sample_offset_cci_sptr self) -> io_signature_sptr"""
        return _doa_swig.sample_offset_cci_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(sample_offset_cci_sptr self) -> long"""
        return _doa_swig.sample_offset_cci_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(sample_offset_cci_sptr self) -> basic_block_sptr"""
        return _doa_swig.sample_offset_cci_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(sample_offset_cci_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.sample_offset_cci_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(sample_offset_cci_sptr self) -> std::string"""
        return _doa_swig.sample_offset_cci_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(sample_offset_cci_sptr self, std::string name)"""
        return _doa_swig.sample_offset_cci_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(sample_offset_cci_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.sample_offset_cci_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(sample_offset_cci_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.sample_offset_cci_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(sample_offset_cci_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.sample_offset_cci_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(sample_offset_cci_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.sample_offset_cci_sptr_message_subscribers(self, which_port)

# Register sample_offset_cci_sptr in _doa_swig:
_doa_swig.sample_offset_cci_sptr_swigregister(sample_offset_cci_sptr)


sample_offset_cci_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sample_offset_cci = sample_offset_cci.make;

class hold_ii(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::hold_ii.

    To avoid accidental use of raw pointers, doa::hold_ii's constructor is in a private implementation class. doa::hold_ii::make is the public interface for creating new instances.

    Args:
        hold : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(hold: "bool") -> "gr::doa::hold_ii::sptr":
        r"""
        make(bool hold) -> hold_ii_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::hold_ii.

        To avoid accidental use of raw pointers, doa::hold_ii's constructor is in a private implementation class. doa::hold_ii::make is the public interface for creating new instances.

        Args:
            hold : 
        """
        return _doa_swig.hold_ii_make(hold)

    def set_hold(self, new_hold: "bool") -> "void":
        r"""set_hold(hold_ii self, bool new_hold)"""
        return _doa_swig.hold_ii_set_hold(self, new_hold)

    def get_hold(self) -> "bool":
        r"""get_hold(hold_ii self) -> bool"""
        return _doa_swig.hold_ii_get_hold(self)
    __swig_destroy__ = _doa_swig.delete_hold_ii

# Register hold_ii in _doa_swig:
_doa_swig.hold_ii_swigregister(hold_ii)

def hold_ii_make(hold: "bool") -> "gr::doa::hold_ii::sptr":
    r"""
    hold_ii_make(bool hold) -> hold_ii_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::hold_ii.

    To avoid accidental use of raw pointers, doa::hold_ii's constructor is in a private implementation class. doa::hold_ii::make is the public interface for creating new instances.

    Args:
        hold : 
    """
    return _doa_swig.hold_ii_make(hold)

class hold_ii_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::hold_ii > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(hold_ii_sptr self) -> hold_ii_sptr
        __init__(hold_ii_sptr self, hold_ii p) -> hold_ii_sptr
        """
        _doa_swig.hold_ii_sptr_swiginit(self, _doa_swig.new_hold_ii_sptr(*args))

    def __deref__(self) -> "gr::doa::hold_ii *":
        r"""__deref__(hold_ii_sptr self) -> hold_ii"""
        return _doa_swig.hold_ii_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_hold_ii_sptr

    def make(self, hold: "bool") -> "gr::doa::hold_ii::sptr":
        r"""
        make(hold_ii_sptr self, bool hold) -> hold_ii_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::hold_ii.

        To avoid accidental use of raw pointers, doa::hold_ii's constructor is in a private implementation class. doa::hold_ii::make is the public interface for creating new instances.

        Args:
            hold : 
        """
        return _doa_swig.hold_ii_sptr_make(self, hold)

    def set_hold(self, new_hold: "bool") -> "void":
        r"""set_hold(hold_ii_sptr self, bool new_hold)"""
        return _doa_swig.hold_ii_sptr_set_hold(self, new_hold)

    def get_hold(self) -> "bool":
        r"""get_hold(hold_ii_sptr self) -> bool"""
        return _doa_swig.hold_ii_sptr_get_hold(self)

    def history(self) -> "unsigned int":
        r"""history(hold_ii_sptr self) -> unsigned int"""
        return _doa_swig.hold_ii_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(hold_ii_sptr self, int which, int delay)
        declare_sample_delay(hold_ii_sptr self, unsigned int delay)
        """
        return _doa_swig.hold_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(hold_ii_sptr self, int which) -> unsigned int"""
        return _doa_swig.hold_ii_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(hold_ii_sptr self, int multiple)"""
        return _doa_swig.hold_ii_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(hold_ii_sptr self) -> int"""
        return _doa_swig.hold_ii_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(hold_ii_sptr self) -> double"""
        return _doa_swig.hold_ii_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(hold_ii_sptr self) -> uint64_t"""
        return _doa_swig.hold_ii_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(hold_ii_sptr self) -> uint64_t"""
        return _doa_swig.hold_ii_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(hold_ii_sptr self) -> bool"""
        return _doa_swig.hold_ii_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(hold_ii_sptr self) -> bool"""
        return _doa_swig.hold_ii_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(hold_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.hold_ii_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(hold_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.hold_ii_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(hold_ii_sptr self, std::string level)"""
        return _doa_swig.hold_ii_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(hold_ii_sptr self) -> std::string"""
        return _doa_swig.hold_ii_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(hold_ii_sptr self) -> int"""
        return _doa_swig.hold_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(hold_ii_sptr self, int m)"""
        return _doa_swig.hold_ii_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(hold_ii_sptr self)"""
        return _doa_swig.hold_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(hold_ii_sptr self) -> bool"""
        return _doa_swig.hold_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(hold_ii_sptr self, int m)"""
        return _doa_swig.hold_ii_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(hold_ii_sptr self) -> int"""
        return _doa_swig.hold_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(hold_ii_sptr self, int i) -> long"""
        return _doa_swig.hold_ii_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(hold_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(hold_ii_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.hold_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(hold_ii_sptr self, int i) -> long"""
        return _doa_swig.hold_ii_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(hold_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(hold_ii_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.hold_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(hold_ii_sptr self) -> float"""
        return _doa_swig.hold_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(hold_ii_sptr self) -> float"""
        return _doa_swig.hold_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(hold_ii_sptr self) -> float"""
        return _doa_swig.hold_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(hold_ii_sptr self) -> float"""
        return _doa_swig.hold_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(hold_ii_sptr self) -> float"""
        return _doa_swig.hold_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(hold_ii_sptr self) -> float"""
        return _doa_swig.hold_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(hold_ii_sptr self, int which) -> float
        pc_input_buffers_full(hold_ii_sptr self) -> pmt_vector_float
        """
        return _doa_swig.hold_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(hold_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(hold_ii_sptr self) -> pmt_vector_float
        """
        return _doa_swig.hold_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(hold_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(hold_ii_sptr self) -> pmt_vector_float
        """
        return _doa_swig.hold_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(hold_ii_sptr self, int which) -> float
        pc_output_buffers_full(hold_ii_sptr self) -> pmt_vector_float
        """
        return _doa_swig.hold_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(hold_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(hold_ii_sptr self) -> pmt_vector_float
        """
        return _doa_swig.hold_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(hold_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(hold_ii_sptr self) -> pmt_vector_float
        """
        return _doa_swig.hold_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(hold_ii_sptr self) -> float"""
        return _doa_swig.hold_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(hold_ii_sptr self) -> float"""
        return _doa_swig.hold_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(hold_ii_sptr self) -> float"""
        return _doa_swig.hold_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(hold_ii_sptr self) -> float"""
        return _doa_swig.hold_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(hold_ii_sptr self) -> float"""
        return _doa_swig.hold_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(hold_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.hold_ii_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(hold_ii_sptr self)"""
        return _doa_swig.hold_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(hold_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.hold_ii_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(hold_ii_sptr self) -> int"""
        return _doa_swig.hold_ii_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(hold_ii_sptr self) -> int"""
        return _doa_swig.hold_ii_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(hold_ii_sptr self, int priority) -> int"""
        return _doa_swig.hold_ii_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(hold_ii_sptr self) -> std::string"""
        return _doa_swig.hold_ii_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(hold_ii_sptr self) -> std::string"""
        return _doa_swig.hold_ii_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(hold_ii_sptr self) -> io_signature_sptr"""
        return _doa_swig.hold_ii_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(hold_ii_sptr self) -> io_signature_sptr"""
        return _doa_swig.hold_ii_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(hold_ii_sptr self) -> long"""
        return _doa_swig.hold_ii_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(hold_ii_sptr self) -> basic_block_sptr"""
        return _doa_swig.hold_ii_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(hold_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.hold_ii_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(hold_ii_sptr self) -> std::string"""
        return _doa_swig.hold_ii_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(hold_ii_sptr self, std::string name)"""
        return _doa_swig.hold_ii_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(hold_ii_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.hold_ii_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(hold_ii_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.hold_ii_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(hold_ii_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.hold_ii_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(hold_ii_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.hold_ii_sptr_message_subscribers(self, which_port)

# Register hold_ii_sptr in _doa_swig:
_doa_swig.hold_ii_sptr_swigregister(hold_ii_sptr)


hold_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
hold_ii = hold_ii.make;

class hold_ff(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::hold_ff.

    To avoid accidental use of raw pointers, doa::hold_ff's constructor is in a private implementation class. doa::hold_ff::make is the public interface for creating new instances.

    Args:
        hold : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(hold: "bool") -> "gr::doa::hold_ff::sptr":
        r"""
        make(bool hold) -> hold_ff_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::hold_ff.

        To avoid accidental use of raw pointers, doa::hold_ff's constructor is in a private implementation class. doa::hold_ff::make is the public interface for creating new instances.

        Args:
            hold : 
        """
        return _doa_swig.hold_ff_make(hold)

    def set_hold(self, new_hold: "bool") -> "void":
        r"""set_hold(hold_ff self, bool new_hold)"""
        return _doa_swig.hold_ff_set_hold(self, new_hold)

    def get_hold(self) -> "bool":
        r"""get_hold(hold_ff self) -> bool"""
        return _doa_swig.hold_ff_get_hold(self)
    __swig_destroy__ = _doa_swig.delete_hold_ff

# Register hold_ff in _doa_swig:
_doa_swig.hold_ff_swigregister(hold_ff)

def hold_ff_make(hold: "bool") -> "gr::doa::hold_ff::sptr":
    r"""
    hold_ff_make(bool hold) -> hold_ff_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::hold_ff.

    To avoid accidental use of raw pointers, doa::hold_ff's constructor is in a private implementation class. doa::hold_ff::make is the public interface for creating new instances.

    Args:
        hold : 
    """
    return _doa_swig.hold_ff_make(hold)

class hold_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::hold_ff > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(hold_ff_sptr self) -> hold_ff_sptr
        __init__(hold_ff_sptr self, hold_ff p) -> hold_ff_sptr
        """
        _doa_swig.hold_ff_sptr_swiginit(self, _doa_swig.new_hold_ff_sptr(*args))

    def __deref__(self) -> "gr::doa::hold_ff *":
        r"""__deref__(hold_ff_sptr self) -> hold_ff"""
        return _doa_swig.hold_ff_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_hold_ff_sptr

    def make(self, hold: "bool") -> "gr::doa::hold_ff::sptr":
        r"""
        make(hold_ff_sptr self, bool hold) -> hold_ff_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::hold_ff.

        To avoid accidental use of raw pointers, doa::hold_ff's constructor is in a private implementation class. doa::hold_ff::make is the public interface for creating new instances.

        Args:
            hold : 
        """
        return _doa_swig.hold_ff_sptr_make(self, hold)

    def set_hold(self, new_hold: "bool") -> "void":
        r"""set_hold(hold_ff_sptr self, bool new_hold)"""
        return _doa_swig.hold_ff_sptr_set_hold(self, new_hold)

    def get_hold(self) -> "bool":
        r"""get_hold(hold_ff_sptr self) -> bool"""
        return _doa_swig.hold_ff_sptr_get_hold(self)

    def history(self) -> "unsigned int":
        r"""history(hold_ff_sptr self) -> unsigned int"""
        return _doa_swig.hold_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(hold_ff_sptr self, int which, int delay)
        declare_sample_delay(hold_ff_sptr self, unsigned int delay)
        """
        return _doa_swig.hold_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(hold_ff_sptr self, int which) -> unsigned int"""
        return _doa_swig.hold_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(hold_ff_sptr self, int multiple)"""
        return _doa_swig.hold_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(hold_ff_sptr self) -> int"""
        return _doa_swig.hold_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(hold_ff_sptr self) -> double"""
        return _doa_swig.hold_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(hold_ff_sptr self) -> uint64_t"""
        return _doa_swig.hold_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(hold_ff_sptr self) -> uint64_t"""
        return _doa_swig.hold_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(hold_ff_sptr self) -> bool"""
        return _doa_swig.hold_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(hold_ff_sptr self) -> bool"""
        return _doa_swig.hold_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(hold_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.hold_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(hold_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.hold_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(hold_ff_sptr self, std::string level)"""
        return _doa_swig.hold_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(hold_ff_sptr self) -> std::string"""
        return _doa_swig.hold_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(hold_ff_sptr self) -> int"""
        return _doa_swig.hold_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(hold_ff_sptr self, int m)"""
        return _doa_swig.hold_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(hold_ff_sptr self)"""
        return _doa_swig.hold_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(hold_ff_sptr self) -> bool"""
        return _doa_swig.hold_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(hold_ff_sptr self, int m)"""
        return _doa_swig.hold_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(hold_ff_sptr self) -> int"""
        return _doa_swig.hold_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(hold_ff_sptr self, int i) -> long"""
        return _doa_swig.hold_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(hold_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(hold_ff_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.hold_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(hold_ff_sptr self, int i) -> long"""
        return _doa_swig.hold_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(hold_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(hold_ff_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.hold_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(hold_ff_sptr self) -> float"""
        return _doa_swig.hold_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(hold_ff_sptr self) -> float"""
        return _doa_swig.hold_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(hold_ff_sptr self) -> float"""
        return _doa_swig.hold_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(hold_ff_sptr self) -> float"""
        return _doa_swig.hold_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(hold_ff_sptr self) -> float"""
        return _doa_swig.hold_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(hold_ff_sptr self) -> float"""
        return _doa_swig.hold_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(hold_ff_sptr self, int which) -> float
        pc_input_buffers_full(hold_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.hold_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(hold_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(hold_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.hold_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(hold_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(hold_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.hold_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(hold_ff_sptr self, int which) -> float
        pc_output_buffers_full(hold_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.hold_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(hold_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(hold_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.hold_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(hold_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(hold_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.hold_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(hold_ff_sptr self) -> float"""
        return _doa_swig.hold_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(hold_ff_sptr self) -> float"""
        return _doa_swig.hold_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(hold_ff_sptr self) -> float"""
        return _doa_swig.hold_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(hold_ff_sptr self) -> float"""
        return _doa_swig.hold_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(hold_ff_sptr self) -> float"""
        return _doa_swig.hold_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(hold_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.hold_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(hold_ff_sptr self)"""
        return _doa_swig.hold_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(hold_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.hold_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(hold_ff_sptr self) -> int"""
        return _doa_swig.hold_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(hold_ff_sptr self) -> int"""
        return _doa_swig.hold_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(hold_ff_sptr self, int priority) -> int"""
        return _doa_swig.hold_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(hold_ff_sptr self) -> std::string"""
        return _doa_swig.hold_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(hold_ff_sptr self) -> std::string"""
        return _doa_swig.hold_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(hold_ff_sptr self) -> io_signature_sptr"""
        return _doa_swig.hold_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(hold_ff_sptr self) -> io_signature_sptr"""
        return _doa_swig.hold_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(hold_ff_sptr self) -> long"""
        return _doa_swig.hold_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(hold_ff_sptr self) -> basic_block_sptr"""
        return _doa_swig.hold_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(hold_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.hold_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(hold_ff_sptr self) -> std::string"""
        return _doa_swig.hold_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(hold_ff_sptr self, std::string name)"""
        return _doa_swig.hold_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(hold_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.hold_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(hold_ff_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.hold_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(hold_ff_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.hold_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(hold_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.hold_ff_sptr_message_subscribers(self, which_port)

# Register hold_ff_sptr in _doa_swig:
_doa_swig.hold_ff_sptr_swigregister(hold_ff_sptr)


hold_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
hold_ff = hold_ff.make;

class full_capon_ccf(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::full_capon_ccf.

    To avoid accidental use of raw pointers, doa::full_capon_ccf's constructor is in a private implementation class. doa::full_capon_ccf::make is the public interface for creating new instances.

    Args:
        vec_in : 
        vec_out : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vec_in: "int", vec_out: "int") -> "gr::doa::full_capon_ccf::sptr":
        r"""
        make(int vec_in, int vec_out) -> full_capon_ccf_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::full_capon_ccf.

        To avoid accidental use of raw pointers, doa::full_capon_ccf's constructor is in a private implementation class. doa::full_capon_ccf::make is the public interface for creating new instances.

        Args:
            vec_in : 
            vec_out : 
        """
        return _doa_swig.full_capon_ccf_make(vec_in, vec_out)
    __swig_destroy__ = _doa_swig.delete_full_capon_ccf

# Register full_capon_ccf in _doa_swig:
_doa_swig.full_capon_ccf_swigregister(full_capon_ccf)

def full_capon_ccf_make(vec_in: "int", vec_out: "int") -> "gr::doa::full_capon_ccf::sptr":
    r"""
    full_capon_ccf_make(int vec_in, int vec_out) -> full_capon_ccf_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::full_capon_ccf.

    To avoid accidental use of raw pointers, doa::full_capon_ccf's constructor is in a private implementation class. doa::full_capon_ccf::make is the public interface for creating new instances.

    Args:
        vec_in : 
        vec_out : 
    """
    return _doa_swig.full_capon_ccf_make(vec_in, vec_out)

class full_capon_ccf_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::full_capon_ccf > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(full_capon_ccf_sptr self) -> full_capon_ccf_sptr
        __init__(full_capon_ccf_sptr self, full_capon_ccf p) -> full_capon_ccf_sptr
        """
        _doa_swig.full_capon_ccf_sptr_swiginit(self, _doa_swig.new_full_capon_ccf_sptr(*args))

    def __deref__(self) -> "gr::doa::full_capon_ccf *":
        r"""__deref__(full_capon_ccf_sptr self) -> full_capon_ccf"""
        return _doa_swig.full_capon_ccf_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_full_capon_ccf_sptr

    def make(self, vec_in: "int", vec_out: "int") -> "gr::doa::full_capon_ccf::sptr":
        r"""
        make(full_capon_ccf_sptr self, int vec_in, int vec_out) -> full_capon_ccf_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::full_capon_ccf.

        To avoid accidental use of raw pointers, doa::full_capon_ccf's constructor is in a private implementation class. doa::full_capon_ccf::make is the public interface for creating new instances.

        Args:
            vec_in : 
            vec_out : 
        """
        return _doa_swig.full_capon_ccf_sptr_make(self, vec_in, vec_out)

    def history(self) -> "unsigned int":
        r"""history(full_capon_ccf_sptr self) -> unsigned int"""
        return _doa_swig.full_capon_ccf_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(full_capon_ccf_sptr self, int which, int delay)
        declare_sample_delay(full_capon_ccf_sptr self, unsigned int delay)
        """
        return _doa_swig.full_capon_ccf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(full_capon_ccf_sptr self, int which) -> unsigned int"""
        return _doa_swig.full_capon_ccf_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(full_capon_ccf_sptr self, int multiple)"""
        return _doa_swig.full_capon_ccf_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(full_capon_ccf_sptr self) -> int"""
        return _doa_swig.full_capon_ccf_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(full_capon_ccf_sptr self) -> double"""
        return _doa_swig.full_capon_ccf_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(full_capon_ccf_sptr self) -> uint64_t"""
        return _doa_swig.full_capon_ccf_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(full_capon_ccf_sptr self) -> uint64_t"""
        return _doa_swig.full_capon_ccf_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(full_capon_ccf_sptr self) -> bool"""
        return _doa_swig.full_capon_ccf_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(full_capon_ccf_sptr self) -> bool"""
        return _doa_swig.full_capon_ccf_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(full_capon_ccf_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.full_capon_ccf_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(full_capon_ccf_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.full_capon_ccf_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(full_capon_ccf_sptr self, std::string level)"""
        return _doa_swig.full_capon_ccf_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(full_capon_ccf_sptr self) -> std::string"""
        return _doa_swig.full_capon_ccf_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(full_capon_ccf_sptr self) -> int"""
        return _doa_swig.full_capon_ccf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(full_capon_ccf_sptr self, int m)"""
        return _doa_swig.full_capon_ccf_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(full_capon_ccf_sptr self)"""
        return _doa_swig.full_capon_ccf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(full_capon_ccf_sptr self) -> bool"""
        return _doa_swig.full_capon_ccf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(full_capon_ccf_sptr self, int m)"""
        return _doa_swig.full_capon_ccf_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(full_capon_ccf_sptr self) -> int"""
        return _doa_swig.full_capon_ccf_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(full_capon_ccf_sptr self, int i) -> long"""
        return _doa_swig.full_capon_ccf_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(full_capon_ccf_sptr self, long max_output_buffer)
        set_max_output_buffer(full_capon_ccf_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.full_capon_ccf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(full_capon_ccf_sptr self, int i) -> long"""
        return _doa_swig.full_capon_ccf_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(full_capon_ccf_sptr self, long min_output_buffer)
        set_min_output_buffer(full_capon_ccf_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.full_capon_ccf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(full_capon_ccf_sptr self) -> float"""
        return _doa_swig.full_capon_ccf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(full_capon_ccf_sptr self) -> float"""
        return _doa_swig.full_capon_ccf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(full_capon_ccf_sptr self) -> float"""
        return _doa_swig.full_capon_ccf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(full_capon_ccf_sptr self) -> float"""
        return _doa_swig.full_capon_ccf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(full_capon_ccf_sptr self) -> float"""
        return _doa_swig.full_capon_ccf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(full_capon_ccf_sptr self) -> float"""
        return _doa_swig.full_capon_ccf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(full_capon_ccf_sptr self, int which) -> float
        pc_input_buffers_full(full_capon_ccf_sptr self) -> pmt_vector_float
        """
        return _doa_swig.full_capon_ccf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(full_capon_ccf_sptr self, int which) -> float
        pc_input_buffers_full_avg(full_capon_ccf_sptr self) -> pmt_vector_float
        """
        return _doa_swig.full_capon_ccf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(full_capon_ccf_sptr self, int which) -> float
        pc_input_buffers_full_var(full_capon_ccf_sptr self) -> pmt_vector_float
        """
        return _doa_swig.full_capon_ccf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(full_capon_ccf_sptr self, int which) -> float
        pc_output_buffers_full(full_capon_ccf_sptr self) -> pmt_vector_float
        """
        return _doa_swig.full_capon_ccf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(full_capon_ccf_sptr self, int which) -> float
        pc_output_buffers_full_avg(full_capon_ccf_sptr self) -> pmt_vector_float
        """
        return _doa_swig.full_capon_ccf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(full_capon_ccf_sptr self, int which) -> float
        pc_output_buffers_full_var(full_capon_ccf_sptr self) -> pmt_vector_float
        """
        return _doa_swig.full_capon_ccf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(full_capon_ccf_sptr self) -> float"""
        return _doa_swig.full_capon_ccf_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(full_capon_ccf_sptr self) -> float"""
        return _doa_swig.full_capon_ccf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(full_capon_ccf_sptr self) -> float"""
        return _doa_swig.full_capon_ccf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(full_capon_ccf_sptr self) -> float"""
        return _doa_swig.full_capon_ccf_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(full_capon_ccf_sptr self) -> float"""
        return _doa_swig.full_capon_ccf_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(full_capon_ccf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.full_capon_ccf_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(full_capon_ccf_sptr self)"""
        return _doa_swig.full_capon_ccf_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(full_capon_ccf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.full_capon_ccf_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(full_capon_ccf_sptr self) -> int"""
        return _doa_swig.full_capon_ccf_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(full_capon_ccf_sptr self) -> int"""
        return _doa_swig.full_capon_ccf_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(full_capon_ccf_sptr self, int priority) -> int"""
        return _doa_swig.full_capon_ccf_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(full_capon_ccf_sptr self) -> std::string"""
        return _doa_swig.full_capon_ccf_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(full_capon_ccf_sptr self) -> std::string"""
        return _doa_swig.full_capon_ccf_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(full_capon_ccf_sptr self) -> io_signature_sptr"""
        return _doa_swig.full_capon_ccf_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(full_capon_ccf_sptr self) -> io_signature_sptr"""
        return _doa_swig.full_capon_ccf_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(full_capon_ccf_sptr self) -> long"""
        return _doa_swig.full_capon_ccf_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(full_capon_ccf_sptr self) -> basic_block_sptr"""
        return _doa_swig.full_capon_ccf_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(full_capon_ccf_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.full_capon_ccf_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(full_capon_ccf_sptr self) -> std::string"""
        return _doa_swig.full_capon_ccf_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(full_capon_ccf_sptr self, std::string name)"""
        return _doa_swig.full_capon_ccf_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(full_capon_ccf_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.full_capon_ccf_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(full_capon_ccf_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.full_capon_ccf_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(full_capon_ccf_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.full_capon_ccf_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(full_capon_ccf_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.full_capon_ccf_sptr_message_subscribers(self, which_port)

# Register full_capon_ccf_sptr in _doa_swig:
_doa_swig.full_capon_ccf_sptr_swigregister(full_capon_ccf_sptr)


full_capon_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
full_capon_ccf = full_capon_ccf.make;

class full_capon3_ccf(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::full_capon3_ccf.

    To avoid accidental use of raw pointers, doa::full_capon3_ccf's constructor is in a private implementation class. doa::full_capon3_ccf::make is the public interface for creating new instances.

    Args:
        vec_in : 
        vec_out : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vec_in: "int", vec_out: "int") -> "gr::doa::full_capon3_ccf::sptr":
        r"""
        make(int vec_in, int vec_out) -> full_capon3_ccf_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::full_capon3_ccf.

        To avoid accidental use of raw pointers, doa::full_capon3_ccf's constructor is in a private implementation class. doa::full_capon3_ccf::make is the public interface for creating new instances.

        Args:
            vec_in : 
            vec_out : 
        """
        return _doa_swig.full_capon3_ccf_make(vec_in, vec_out)
    __swig_destroy__ = _doa_swig.delete_full_capon3_ccf

# Register full_capon3_ccf in _doa_swig:
_doa_swig.full_capon3_ccf_swigregister(full_capon3_ccf)

def full_capon3_ccf_make(vec_in: "int", vec_out: "int") -> "gr::doa::full_capon3_ccf::sptr":
    r"""
    full_capon3_ccf_make(int vec_in, int vec_out) -> full_capon3_ccf_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::full_capon3_ccf.

    To avoid accidental use of raw pointers, doa::full_capon3_ccf's constructor is in a private implementation class. doa::full_capon3_ccf::make is the public interface for creating new instances.

    Args:
        vec_in : 
        vec_out : 
    """
    return _doa_swig.full_capon3_ccf_make(vec_in, vec_out)

class full_capon3_ccf_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::full_capon3_ccf > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(full_capon3_ccf_sptr self) -> full_capon3_ccf_sptr
        __init__(full_capon3_ccf_sptr self, full_capon3_ccf p) -> full_capon3_ccf_sptr
        """
        _doa_swig.full_capon3_ccf_sptr_swiginit(self, _doa_swig.new_full_capon3_ccf_sptr(*args))

    def __deref__(self) -> "gr::doa::full_capon3_ccf *":
        r"""__deref__(full_capon3_ccf_sptr self) -> full_capon3_ccf"""
        return _doa_swig.full_capon3_ccf_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_full_capon3_ccf_sptr

    def make(self, vec_in: "int", vec_out: "int") -> "gr::doa::full_capon3_ccf::sptr":
        r"""
        make(full_capon3_ccf_sptr self, int vec_in, int vec_out) -> full_capon3_ccf_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::full_capon3_ccf.

        To avoid accidental use of raw pointers, doa::full_capon3_ccf's constructor is in a private implementation class. doa::full_capon3_ccf::make is the public interface for creating new instances.

        Args:
            vec_in : 
            vec_out : 
        """
        return _doa_swig.full_capon3_ccf_sptr_make(self, vec_in, vec_out)

    def history(self) -> "unsigned int":
        r"""history(full_capon3_ccf_sptr self) -> unsigned int"""
        return _doa_swig.full_capon3_ccf_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(full_capon3_ccf_sptr self, int which, int delay)
        declare_sample_delay(full_capon3_ccf_sptr self, unsigned int delay)
        """
        return _doa_swig.full_capon3_ccf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(full_capon3_ccf_sptr self, int which) -> unsigned int"""
        return _doa_swig.full_capon3_ccf_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(full_capon3_ccf_sptr self, int multiple)"""
        return _doa_swig.full_capon3_ccf_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(full_capon3_ccf_sptr self) -> int"""
        return _doa_swig.full_capon3_ccf_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(full_capon3_ccf_sptr self) -> double"""
        return _doa_swig.full_capon3_ccf_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(full_capon3_ccf_sptr self) -> uint64_t"""
        return _doa_swig.full_capon3_ccf_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(full_capon3_ccf_sptr self) -> uint64_t"""
        return _doa_swig.full_capon3_ccf_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(full_capon3_ccf_sptr self) -> bool"""
        return _doa_swig.full_capon3_ccf_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(full_capon3_ccf_sptr self) -> bool"""
        return _doa_swig.full_capon3_ccf_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(full_capon3_ccf_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.full_capon3_ccf_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(full_capon3_ccf_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.full_capon3_ccf_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(full_capon3_ccf_sptr self, std::string level)"""
        return _doa_swig.full_capon3_ccf_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(full_capon3_ccf_sptr self) -> std::string"""
        return _doa_swig.full_capon3_ccf_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(full_capon3_ccf_sptr self) -> int"""
        return _doa_swig.full_capon3_ccf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(full_capon3_ccf_sptr self, int m)"""
        return _doa_swig.full_capon3_ccf_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(full_capon3_ccf_sptr self)"""
        return _doa_swig.full_capon3_ccf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(full_capon3_ccf_sptr self) -> bool"""
        return _doa_swig.full_capon3_ccf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(full_capon3_ccf_sptr self, int m)"""
        return _doa_swig.full_capon3_ccf_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(full_capon3_ccf_sptr self) -> int"""
        return _doa_swig.full_capon3_ccf_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(full_capon3_ccf_sptr self, int i) -> long"""
        return _doa_swig.full_capon3_ccf_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(full_capon3_ccf_sptr self, long max_output_buffer)
        set_max_output_buffer(full_capon3_ccf_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.full_capon3_ccf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(full_capon3_ccf_sptr self, int i) -> long"""
        return _doa_swig.full_capon3_ccf_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(full_capon3_ccf_sptr self, long min_output_buffer)
        set_min_output_buffer(full_capon3_ccf_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.full_capon3_ccf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(full_capon3_ccf_sptr self) -> float"""
        return _doa_swig.full_capon3_ccf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(full_capon3_ccf_sptr self) -> float"""
        return _doa_swig.full_capon3_ccf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(full_capon3_ccf_sptr self) -> float"""
        return _doa_swig.full_capon3_ccf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(full_capon3_ccf_sptr self) -> float"""
        return _doa_swig.full_capon3_ccf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(full_capon3_ccf_sptr self) -> float"""
        return _doa_swig.full_capon3_ccf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(full_capon3_ccf_sptr self) -> float"""
        return _doa_swig.full_capon3_ccf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(full_capon3_ccf_sptr self, int which) -> float
        pc_input_buffers_full(full_capon3_ccf_sptr self) -> pmt_vector_float
        """
        return _doa_swig.full_capon3_ccf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(full_capon3_ccf_sptr self, int which) -> float
        pc_input_buffers_full_avg(full_capon3_ccf_sptr self) -> pmt_vector_float
        """
        return _doa_swig.full_capon3_ccf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(full_capon3_ccf_sptr self, int which) -> float
        pc_input_buffers_full_var(full_capon3_ccf_sptr self) -> pmt_vector_float
        """
        return _doa_swig.full_capon3_ccf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(full_capon3_ccf_sptr self, int which) -> float
        pc_output_buffers_full(full_capon3_ccf_sptr self) -> pmt_vector_float
        """
        return _doa_swig.full_capon3_ccf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(full_capon3_ccf_sptr self, int which) -> float
        pc_output_buffers_full_avg(full_capon3_ccf_sptr self) -> pmt_vector_float
        """
        return _doa_swig.full_capon3_ccf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(full_capon3_ccf_sptr self, int which) -> float
        pc_output_buffers_full_var(full_capon3_ccf_sptr self) -> pmt_vector_float
        """
        return _doa_swig.full_capon3_ccf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(full_capon3_ccf_sptr self) -> float"""
        return _doa_swig.full_capon3_ccf_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(full_capon3_ccf_sptr self) -> float"""
        return _doa_swig.full_capon3_ccf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(full_capon3_ccf_sptr self) -> float"""
        return _doa_swig.full_capon3_ccf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(full_capon3_ccf_sptr self) -> float"""
        return _doa_swig.full_capon3_ccf_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(full_capon3_ccf_sptr self) -> float"""
        return _doa_swig.full_capon3_ccf_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(full_capon3_ccf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.full_capon3_ccf_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(full_capon3_ccf_sptr self)"""
        return _doa_swig.full_capon3_ccf_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(full_capon3_ccf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.full_capon3_ccf_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(full_capon3_ccf_sptr self) -> int"""
        return _doa_swig.full_capon3_ccf_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(full_capon3_ccf_sptr self) -> int"""
        return _doa_swig.full_capon3_ccf_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(full_capon3_ccf_sptr self, int priority) -> int"""
        return _doa_swig.full_capon3_ccf_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(full_capon3_ccf_sptr self) -> std::string"""
        return _doa_swig.full_capon3_ccf_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(full_capon3_ccf_sptr self) -> std::string"""
        return _doa_swig.full_capon3_ccf_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(full_capon3_ccf_sptr self) -> io_signature_sptr"""
        return _doa_swig.full_capon3_ccf_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(full_capon3_ccf_sptr self) -> io_signature_sptr"""
        return _doa_swig.full_capon3_ccf_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(full_capon3_ccf_sptr self) -> long"""
        return _doa_swig.full_capon3_ccf_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(full_capon3_ccf_sptr self) -> basic_block_sptr"""
        return _doa_swig.full_capon3_ccf_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(full_capon3_ccf_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.full_capon3_ccf_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(full_capon3_ccf_sptr self) -> std::string"""
        return _doa_swig.full_capon3_ccf_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(full_capon3_ccf_sptr self, std::string name)"""
        return _doa_swig.full_capon3_ccf_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(full_capon3_ccf_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.full_capon3_ccf_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(full_capon3_ccf_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.full_capon3_ccf_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(full_capon3_ccf_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.full_capon3_ccf_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(full_capon3_ccf_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.full_capon3_ccf_sptr_message_subscribers(self, which_port)

# Register full_capon3_ccf_sptr in _doa_swig:
_doa_swig.full_capon3_ccf_sptr_swigregister(full_capon3_ccf_sptr)


full_capon3_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
full_capon3_ccf = full_capon3_ccf.make;

class multiply_exp_cc(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::multiply_exp_cc.

    To avoid accidental use of raw pointers, doa::multiply_exp_cc's constructor is in a private implementation class. doa::multiply_exp_cc::make is the public interface for creating new instances.

    Args:
        arg : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(arg: "float") -> "gr::doa::multiply_exp_cc::sptr":
        r"""
        make(float arg) -> multiply_exp_cc_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::multiply_exp_cc.

        To avoid accidental use of raw pointers, doa::multiply_exp_cc's constructor is in a private implementation class. doa::multiply_exp_cc::make is the public interface for creating new instances.

        Args:
            arg : 
        """
        return _doa_swig.multiply_exp_cc_make(arg)

    def set_arg(self, arg: "float") -> "void":
        r"""set_arg(multiply_exp_cc self, float arg)"""
        return _doa_swig.multiply_exp_cc_set_arg(self, arg)
    __swig_destroy__ = _doa_swig.delete_multiply_exp_cc

# Register multiply_exp_cc in _doa_swig:
_doa_swig.multiply_exp_cc_swigregister(multiply_exp_cc)

def multiply_exp_cc_make(arg: "float") -> "gr::doa::multiply_exp_cc::sptr":
    r"""
    multiply_exp_cc_make(float arg) -> multiply_exp_cc_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::multiply_exp_cc.

    To avoid accidental use of raw pointers, doa::multiply_exp_cc's constructor is in a private implementation class. doa::multiply_exp_cc::make is the public interface for creating new instances.

    Args:
        arg : 
    """
    return _doa_swig.multiply_exp_cc_make(arg)

class multiply_exp_cc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::multiply_exp_cc > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(multiply_exp_cc_sptr self) -> multiply_exp_cc_sptr
        __init__(multiply_exp_cc_sptr self, multiply_exp_cc p) -> multiply_exp_cc_sptr
        """
        _doa_swig.multiply_exp_cc_sptr_swiginit(self, _doa_swig.new_multiply_exp_cc_sptr(*args))

    def __deref__(self) -> "gr::doa::multiply_exp_cc *":
        r"""__deref__(multiply_exp_cc_sptr self) -> multiply_exp_cc"""
        return _doa_swig.multiply_exp_cc_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_multiply_exp_cc_sptr

    def make(self, arg: "float") -> "gr::doa::multiply_exp_cc::sptr":
        r"""
        make(multiply_exp_cc_sptr self, float arg) -> multiply_exp_cc_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::multiply_exp_cc.

        To avoid accidental use of raw pointers, doa::multiply_exp_cc's constructor is in a private implementation class. doa::multiply_exp_cc::make is the public interface for creating new instances.

        Args:
            arg : 
        """
        return _doa_swig.multiply_exp_cc_sptr_make(self, arg)

    def set_arg(self, arg: "float") -> "void":
        r"""set_arg(multiply_exp_cc_sptr self, float arg)"""
        return _doa_swig.multiply_exp_cc_sptr_set_arg(self, arg)

    def history(self) -> "unsigned int":
        r"""history(multiply_exp_cc_sptr self) -> unsigned int"""
        return _doa_swig.multiply_exp_cc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(multiply_exp_cc_sptr self, int which, int delay)
        declare_sample_delay(multiply_exp_cc_sptr self, unsigned int delay)
        """
        return _doa_swig.multiply_exp_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(multiply_exp_cc_sptr self, int which) -> unsigned int"""
        return _doa_swig.multiply_exp_cc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(multiply_exp_cc_sptr self, int multiple)"""
        return _doa_swig.multiply_exp_cc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(multiply_exp_cc_sptr self) -> int"""
        return _doa_swig.multiply_exp_cc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(multiply_exp_cc_sptr self) -> double"""
        return _doa_swig.multiply_exp_cc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(multiply_exp_cc_sptr self) -> uint64_t"""
        return _doa_swig.multiply_exp_cc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(multiply_exp_cc_sptr self) -> uint64_t"""
        return _doa_swig.multiply_exp_cc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(multiply_exp_cc_sptr self) -> bool"""
        return _doa_swig.multiply_exp_cc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(multiply_exp_cc_sptr self) -> bool"""
        return _doa_swig.multiply_exp_cc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(multiply_exp_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.multiply_exp_cc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(multiply_exp_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.multiply_exp_cc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(multiply_exp_cc_sptr self, std::string level)"""
        return _doa_swig.multiply_exp_cc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(multiply_exp_cc_sptr self) -> std::string"""
        return _doa_swig.multiply_exp_cc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(multiply_exp_cc_sptr self) -> int"""
        return _doa_swig.multiply_exp_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(multiply_exp_cc_sptr self, int m)"""
        return _doa_swig.multiply_exp_cc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(multiply_exp_cc_sptr self)"""
        return _doa_swig.multiply_exp_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(multiply_exp_cc_sptr self) -> bool"""
        return _doa_swig.multiply_exp_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(multiply_exp_cc_sptr self, int m)"""
        return _doa_swig.multiply_exp_cc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(multiply_exp_cc_sptr self) -> int"""
        return _doa_swig.multiply_exp_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(multiply_exp_cc_sptr self, int i) -> long"""
        return _doa_swig.multiply_exp_cc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(multiply_exp_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_exp_cc_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.multiply_exp_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(multiply_exp_cc_sptr self, int i) -> long"""
        return _doa_swig.multiply_exp_cc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(multiply_exp_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_exp_cc_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.multiply_exp_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(multiply_exp_cc_sptr self) -> float"""
        return _doa_swig.multiply_exp_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(multiply_exp_cc_sptr self) -> float"""
        return _doa_swig.multiply_exp_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(multiply_exp_cc_sptr self) -> float"""
        return _doa_swig.multiply_exp_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(multiply_exp_cc_sptr self) -> float"""
        return _doa_swig.multiply_exp_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(multiply_exp_cc_sptr self) -> float"""
        return _doa_swig.multiply_exp_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(multiply_exp_cc_sptr self) -> float"""
        return _doa_swig.multiply_exp_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(multiply_exp_cc_sptr self, int which) -> float
        pc_input_buffers_full(multiply_exp_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.multiply_exp_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(multiply_exp_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_exp_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.multiply_exp_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(multiply_exp_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_exp_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.multiply_exp_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(multiply_exp_cc_sptr self, int which) -> float
        pc_output_buffers_full(multiply_exp_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.multiply_exp_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(multiply_exp_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_exp_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.multiply_exp_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(multiply_exp_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_exp_cc_sptr self) -> pmt_vector_float
        """
        return _doa_swig.multiply_exp_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(multiply_exp_cc_sptr self) -> float"""
        return _doa_swig.multiply_exp_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(multiply_exp_cc_sptr self) -> float"""
        return _doa_swig.multiply_exp_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(multiply_exp_cc_sptr self) -> float"""
        return _doa_swig.multiply_exp_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(multiply_exp_cc_sptr self) -> float"""
        return _doa_swig.multiply_exp_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(multiply_exp_cc_sptr self) -> float"""
        return _doa_swig.multiply_exp_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(multiply_exp_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.multiply_exp_cc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(multiply_exp_cc_sptr self)"""
        return _doa_swig.multiply_exp_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(multiply_exp_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.multiply_exp_cc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(multiply_exp_cc_sptr self) -> int"""
        return _doa_swig.multiply_exp_cc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(multiply_exp_cc_sptr self) -> int"""
        return _doa_swig.multiply_exp_cc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(multiply_exp_cc_sptr self, int priority) -> int"""
        return _doa_swig.multiply_exp_cc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(multiply_exp_cc_sptr self) -> std::string"""
        return _doa_swig.multiply_exp_cc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(multiply_exp_cc_sptr self) -> std::string"""
        return _doa_swig.multiply_exp_cc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(multiply_exp_cc_sptr self) -> io_signature_sptr"""
        return _doa_swig.multiply_exp_cc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(multiply_exp_cc_sptr self) -> io_signature_sptr"""
        return _doa_swig.multiply_exp_cc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(multiply_exp_cc_sptr self) -> long"""
        return _doa_swig.multiply_exp_cc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(multiply_exp_cc_sptr self) -> basic_block_sptr"""
        return _doa_swig.multiply_exp_cc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(multiply_exp_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.multiply_exp_cc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(multiply_exp_cc_sptr self) -> std::string"""
        return _doa_swig.multiply_exp_cc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(multiply_exp_cc_sptr self, std::string name)"""
        return _doa_swig.multiply_exp_cc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(multiply_exp_cc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.multiply_exp_cc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(multiply_exp_cc_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.multiply_exp_cc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(multiply_exp_cc_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.multiply_exp_cc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(multiply_exp_cc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.multiply_exp_cc_sptr_message_subscribers(self, which_port)

# Register multiply_exp_cc_sptr in _doa_swig:
_doa_swig.multiply_exp_cc_sptr_swigregister(multiply_exp_cc_sptr)


multiply_exp_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_exp_cc = multiply_exp_cc.make;

class pi2pi_ff(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::pi2pi_ff.

    To avoid accidental use of raw pointers, doa::pi2pi_ff's constructor is in a private implementation class. doa::pi2pi_ff::make is the public interface for creating new instances.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make() -> "gr::doa::pi2pi_ff::sptr":
        r"""
        make() -> pi2pi_ff_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::pi2pi_ff.

        To avoid accidental use of raw pointers, doa::pi2pi_ff's constructor is in a private implementation class. doa::pi2pi_ff::make is the public interface for creating new instances.
        """
        return _doa_swig.pi2pi_ff_make()
    __swig_destroy__ = _doa_swig.delete_pi2pi_ff

# Register pi2pi_ff in _doa_swig:
_doa_swig.pi2pi_ff_swigregister(pi2pi_ff)

def pi2pi_ff_make() -> "gr::doa::pi2pi_ff::sptr":
    r"""
    pi2pi_ff_make() -> pi2pi_ff_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::pi2pi_ff.

    To avoid accidental use of raw pointers, doa::pi2pi_ff's constructor is in a private implementation class. doa::pi2pi_ff::make is the public interface for creating new instances.
    """
    return _doa_swig.pi2pi_ff_make()

class pi2pi_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::pi2pi_ff > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(pi2pi_ff_sptr self) -> pi2pi_ff_sptr
        __init__(pi2pi_ff_sptr self, pi2pi_ff p) -> pi2pi_ff_sptr
        """
        _doa_swig.pi2pi_ff_sptr_swiginit(self, _doa_swig.new_pi2pi_ff_sptr(*args))

    def __deref__(self) -> "gr::doa::pi2pi_ff *":
        r"""__deref__(pi2pi_ff_sptr self) -> pi2pi_ff"""
        return _doa_swig.pi2pi_ff_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_pi2pi_ff_sptr

    def make(self) -> "gr::doa::pi2pi_ff::sptr":
        r"""
        make(pi2pi_ff_sptr self) -> pi2pi_ff_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::pi2pi_ff.

        To avoid accidental use of raw pointers, doa::pi2pi_ff's constructor is in a private implementation class. doa::pi2pi_ff::make is the public interface for creating new instances.
        """
        return _doa_swig.pi2pi_ff_sptr_make(self)

    def history(self) -> "unsigned int":
        r"""history(pi2pi_ff_sptr self) -> unsigned int"""
        return _doa_swig.pi2pi_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(pi2pi_ff_sptr self, int which, int delay)
        declare_sample_delay(pi2pi_ff_sptr self, unsigned int delay)
        """
        return _doa_swig.pi2pi_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(pi2pi_ff_sptr self, int which) -> unsigned int"""
        return _doa_swig.pi2pi_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(pi2pi_ff_sptr self, int multiple)"""
        return _doa_swig.pi2pi_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(pi2pi_ff_sptr self) -> int"""
        return _doa_swig.pi2pi_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(pi2pi_ff_sptr self) -> double"""
        return _doa_swig.pi2pi_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(pi2pi_ff_sptr self) -> uint64_t"""
        return _doa_swig.pi2pi_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(pi2pi_ff_sptr self) -> uint64_t"""
        return _doa_swig.pi2pi_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(pi2pi_ff_sptr self) -> bool"""
        return _doa_swig.pi2pi_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(pi2pi_ff_sptr self) -> bool"""
        return _doa_swig.pi2pi_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(pi2pi_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.pi2pi_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(pi2pi_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.pi2pi_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(pi2pi_ff_sptr self, std::string level)"""
        return _doa_swig.pi2pi_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(pi2pi_ff_sptr self) -> std::string"""
        return _doa_swig.pi2pi_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(pi2pi_ff_sptr self) -> int"""
        return _doa_swig.pi2pi_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(pi2pi_ff_sptr self, int m)"""
        return _doa_swig.pi2pi_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(pi2pi_ff_sptr self)"""
        return _doa_swig.pi2pi_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(pi2pi_ff_sptr self) -> bool"""
        return _doa_swig.pi2pi_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(pi2pi_ff_sptr self, int m)"""
        return _doa_swig.pi2pi_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(pi2pi_ff_sptr self) -> int"""
        return _doa_swig.pi2pi_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(pi2pi_ff_sptr self, int i) -> long"""
        return _doa_swig.pi2pi_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(pi2pi_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(pi2pi_ff_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.pi2pi_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(pi2pi_ff_sptr self, int i) -> long"""
        return _doa_swig.pi2pi_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(pi2pi_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(pi2pi_ff_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.pi2pi_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(pi2pi_ff_sptr self) -> float"""
        return _doa_swig.pi2pi_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(pi2pi_ff_sptr self) -> float"""
        return _doa_swig.pi2pi_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(pi2pi_ff_sptr self) -> float"""
        return _doa_swig.pi2pi_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(pi2pi_ff_sptr self) -> float"""
        return _doa_swig.pi2pi_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(pi2pi_ff_sptr self) -> float"""
        return _doa_swig.pi2pi_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(pi2pi_ff_sptr self) -> float"""
        return _doa_swig.pi2pi_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(pi2pi_ff_sptr self, int which) -> float
        pc_input_buffers_full(pi2pi_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.pi2pi_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(pi2pi_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(pi2pi_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.pi2pi_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(pi2pi_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(pi2pi_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.pi2pi_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(pi2pi_ff_sptr self, int which) -> float
        pc_output_buffers_full(pi2pi_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.pi2pi_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(pi2pi_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(pi2pi_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.pi2pi_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(pi2pi_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(pi2pi_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.pi2pi_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(pi2pi_ff_sptr self) -> float"""
        return _doa_swig.pi2pi_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(pi2pi_ff_sptr self) -> float"""
        return _doa_swig.pi2pi_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(pi2pi_ff_sptr self) -> float"""
        return _doa_swig.pi2pi_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(pi2pi_ff_sptr self) -> float"""
        return _doa_swig.pi2pi_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(pi2pi_ff_sptr self) -> float"""
        return _doa_swig.pi2pi_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(pi2pi_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.pi2pi_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(pi2pi_ff_sptr self)"""
        return _doa_swig.pi2pi_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(pi2pi_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.pi2pi_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(pi2pi_ff_sptr self) -> int"""
        return _doa_swig.pi2pi_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(pi2pi_ff_sptr self) -> int"""
        return _doa_swig.pi2pi_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(pi2pi_ff_sptr self, int priority) -> int"""
        return _doa_swig.pi2pi_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(pi2pi_ff_sptr self) -> std::string"""
        return _doa_swig.pi2pi_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(pi2pi_ff_sptr self) -> std::string"""
        return _doa_swig.pi2pi_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(pi2pi_ff_sptr self) -> io_signature_sptr"""
        return _doa_swig.pi2pi_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(pi2pi_ff_sptr self) -> io_signature_sptr"""
        return _doa_swig.pi2pi_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(pi2pi_ff_sptr self) -> long"""
        return _doa_swig.pi2pi_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(pi2pi_ff_sptr self) -> basic_block_sptr"""
        return _doa_swig.pi2pi_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(pi2pi_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.pi2pi_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(pi2pi_ff_sptr self) -> std::string"""
        return _doa_swig.pi2pi_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(pi2pi_ff_sptr self, std::string name)"""
        return _doa_swig.pi2pi_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(pi2pi_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.pi2pi_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(pi2pi_ff_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.pi2pi_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(pi2pi_ff_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.pi2pi_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(pi2pi_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.pi2pi_ff_sptr_message_subscribers(self, which_port)

# Register pi2pi_ff_sptr in _doa_swig:
_doa_swig.pi2pi_ff_sptr_swigregister(pi2pi_ff_sptr)


pi2pi_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pi2pi_ff = pi2pi_ff.make;

class delay(object):
    r"""
    delay the input by a certain number of samples

    Positive delays insert zero items at the beginning of the stream. Negative delays discard items from the stream.


    You cannot initialize this block with a negative delay, however. That leads to a causality issue with the buffers when they are initialized. If you need to negetively delay one path, then put the positive delay on the other path instead.

    Constructor Specific Documentation:

    Make a delay block.

    Args:
        itemsize : size of the data items.
        delay : number of samples to delay stream (>= 0).
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(itemsize: "size_t", delay: "int") -> "gr::doa::delay::sptr":
        r"""
        make(size_t itemsize, int delay) -> delay_sptr
        delay the input by a certain number of samples

        Positive delays insert zero items at the beginning of the stream. Negative delays discard items from the stream.


        You cannot initialize this block with a negative delay, however. That leads to a causality issue with the buffers when they are initialized. If you need to negetively delay one path, then put the positive delay on the other path instead.

        Constructor Specific Documentation:

        Make a delay block.

        Args:
            itemsize : size of the data items.
            delay : number of samples to delay stream (>= 0).
        """
        return _doa_swig.delay_make(itemsize, delay)

    def dly(self) -> "int":
        r"""dly(delay self) -> int"""
        return _doa_swig.delay_dly(self)

    def set_dly(self, d: "int") -> "void":
        r"""
        set_dly(delay self, int d)
        Reset the delay.
        """
        return _doa_swig.delay_set_dly(self, d)
    __swig_destroy__ = _doa_swig.delete_delay

# Register delay in _doa_swig:
_doa_swig.delay_swigregister(delay)

def delay_make(itemsize: "size_t", delay: "int") -> "gr::doa::delay::sptr":
    r"""
    delay_make(size_t itemsize, int delay) -> delay_sptr
    delay the input by a certain number of samples

    Positive delays insert zero items at the beginning of the stream. Negative delays discard items from the stream.


    You cannot initialize this block with a negative delay, however. That leads to a causality issue with the buffers when they are initialized. If you need to negetively delay one path, then put the positive delay on the other path instead.

    Constructor Specific Documentation:

    Make a delay block.

    Args:
        itemsize : size of the data items.
        delay : number of samples to delay stream (>= 0).
    """
    return _doa_swig.delay_make(itemsize, delay)

class delay_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::delay > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(delay_sptr self) -> delay_sptr
        __init__(delay_sptr self, delay p) -> delay_sptr
        """
        _doa_swig.delay_sptr_swiginit(self, _doa_swig.new_delay_sptr(*args))

    def __deref__(self) -> "gr::doa::delay *":
        r"""__deref__(delay_sptr self) -> delay"""
        return _doa_swig.delay_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_delay_sptr

    def make(self, itemsize: "size_t", delay: "int") -> "gr::doa::delay::sptr":
        r"""
        make(delay_sptr self, size_t itemsize, int delay) -> delay_sptr
        delay the input by a certain number of samples

        Positive delays insert zero items at the beginning of the stream. Negative delays discard items from the stream.


        You cannot initialize this block with a negative delay, however. That leads to a causality issue with the buffers when they are initialized. If you need to negetively delay one path, then put the positive delay on the other path instead.

        Constructor Specific Documentation:

        Make a delay block.

        Args:
            itemsize : size of the data items.
            delay : number of samples to delay stream (>= 0).
        """
        return _doa_swig.delay_sptr_make(self, itemsize, delay)

    def dly(self) -> "int":
        r"""dly(delay_sptr self) -> int"""
        return _doa_swig.delay_sptr_dly(self)

    def set_dly(self, d: "int") -> "void":
        r"""
        set_dly(delay_sptr self, int d)
        Reset the delay.
        """
        return _doa_swig.delay_sptr_set_dly(self, d)

    def history(self) -> "unsigned int":
        r"""history(delay_sptr self) -> unsigned int"""
        return _doa_swig.delay_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(delay_sptr self, int which, int delay)
        declare_sample_delay(delay_sptr self, unsigned int delay)
        """
        return _doa_swig.delay_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(delay_sptr self, int which) -> unsigned int"""
        return _doa_swig.delay_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(delay_sptr self, int multiple)"""
        return _doa_swig.delay_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(delay_sptr self) -> int"""
        return _doa_swig.delay_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(delay_sptr self) -> double"""
        return _doa_swig.delay_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(delay_sptr self) -> uint64_t"""
        return _doa_swig.delay_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(delay_sptr self) -> uint64_t"""
        return _doa_swig.delay_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(delay_sptr self) -> bool"""
        return _doa_swig.delay_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(delay_sptr self) -> bool"""
        return _doa_swig.delay_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(delay_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.delay_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(delay_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.delay_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(delay_sptr self, std::string level)"""
        return _doa_swig.delay_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(delay_sptr self) -> std::string"""
        return _doa_swig.delay_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(delay_sptr self) -> int"""
        return _doa_swig.delay_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(delay_sptr self, int m)"""
        return _doa_swig.delay_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(delay_sptr self)"""
        return _doa_swig.delay_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(delay_sptr self) -> bool"""
        return _doa_swig.delay_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(delay_sptr self, int m)"""
        return _doa_swig.delay_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(delay_sptr self) -> int"""
        return _doa_swig.delay_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(delay_sptr self, int i) -> long"""
        return _doa_swig.delay_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(delay_sptr self, long max_output_buffer)
        set_max_output_buffer(delay_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.delay_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(delay_sptr self, int i) -> long"""
        return _doa_swig.delay_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(delay_sptr self, long min_output_buffer)
        set_min_output_buffer(delay_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.delay_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(delay_sptr self) -> float"""
        return _doa_swig.delay_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(delay_sptr self) -> float"""
        return _doa_swig.delay_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(delay_sptr self) -> float"""
        return _doa_swig.delay_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(delay_sptr self) -> float"""
        return _doa_swig.delay_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(delay_sptr self) -> float"""
        return _doa_swig.delay_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(delay_sptr self) -> float"""
        return _doa_swig.delay_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(delay_sptr self, int which) -> float
        pc_input_buffers_full(delay_sptr self) -> pmt_vector_float
        """
        return _doa_swig.delay_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(delay_sptr self, int which) -> float
        pc_input_buffers_full_avg(delay_sptr self) -> pmt_vector_float
        """
        return _doa_swig.delay_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(delay_sptr self, int which) -> float
        pc_input_buffers_full_var(delay_sptr self) -> pmt_vector_float
        """
        return _doa_swig.delay_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(delay_sptr self, int which) -> float
        pc_output_buffers_full(delay_sptr self) -> pmt_vector_float
        """
        return _doa_swig.delay_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(delay_sptr self, int which) -> float
        pc_output_buffers_full_avg(delay_sptr self) -> pmt_vector_float
        """
        return _doa_swig.delay_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(delay_sptr self, int which) -> float
        pc_output_buffers_full_var(delay_sptr self) -> pmt_vector_float
        """
        return _doa_swig.delay_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(delay_sptr self) -> float"""
        return _doa_swig.delay_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(delay_sptr self) -> float"""
        return _doa_swig.delay_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(delay_sptr self) -> float"""
        return _doa_swig.delay_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(delay_sptr self) -> float"""
        return _doa_swig.delay_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(delay_sptr self) -> float"""
        return _doa_swig.delay_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(delay_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.delay_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(delay_sptr self)"""
        return _doa_swig.delay_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(delay_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.delay_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(delay_sptr self) -> int"""
        return _doa_swig.delay_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(delay_sptr self) -> int"""
        return _doa_swig.delay_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(delay_sptr self, int priority) -> int"""
        return _doa_swig.delay_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(delay_sptr self) -> std::string"""
        return _doa_swig.delay_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(delay_sptr self) -> std::string"""
        return _doa_swig.delay_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(delay_sptr self) -> io_signature_sptr"""
        return _doa_swig.delay_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(delay_sptr self) -> io_signature_sptr"""
        return _doa_swig.delay_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(delay_sptr self) -> long"""
        return _doa_swig.delay_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(delay_sptr self) -> basic_block_sptr"""
        return _doa_swig.delay_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(delay_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.delay_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(delay_sptr self) -> std::string"""
        return _doa_swig.delay_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(delay_sptr self, std::string name)"""
        return _doa_swig.delay_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(delay_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.delay_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(delay_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.delay_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(delay_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.delay_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(delay_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.delay_sptr_message_subscribers(self, which_port)

# Register delay_sptr in _doa_swig:
_doa_swig.delay_sptr_swigregister(delay_sptr)


delay_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
delay = delay.make;

class message_sink_i(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::message_sink_i.

    To avoid accidental use of raw pointers, doa::message_sink_i's constructor is in a private implementation class. doa::message_sink_i::make is the public interface for creating new instances.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make() -> "gr::doa::message_sink_i::sptr":
        r"""
        make() -> message_sink_i_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::message_sink_i.

        To avoid accidental use of raw pointers, doa::message_sink_i's constructor is in a private implementation class. doa::message_sink_i::make is the public interface for creating new instances.
        """
        return _doa_swig.message_sink_i_make()
    __swig_destroy__ = _doa_swig.delete_message_sink_i

# Register message_sink_i in _doa_swig:
_doa_swig.message_sink_i_swigregister(message_sink_i)

def message_sink_i_make() -> "gr::doa::message_sink_i::sptr":
    r"""
    message_sink_i_make() -> message_sink_i_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::message_sink_i.

    To avoid accidental use of raw pointers, doa::message_sink_i's constructor is in a private implementation class. doa::message_sink_i::make is the public interface for creating new instances.
    """
    return _doa_swig.message_sink_i_make()

class message_sink_i_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::message_sink_i > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(message_sink_i_sptr self) -> message_sink_i_sptr
        __init__(message_sink_i_sptr self, message_sink_i p) -> message_sink_i_sptr
        """
        _doa_swig.message_sink_i_sptr_swiginit(self, _doa_swig.new_message_sink_i_sptr(*args))

    def __deref__(self) -> "gr::doa::message_sink_i *":
        r"""__deref__(message_sink_i_sptr self) -> message_sink_i"""
        return _doa_swig.message_sink_i_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_message_sink_i_sptr

    def make(self) -> "gr::doa::message_sink_i::sptr":
        r"""
        make(message_sink_i_sptr self) -> message_sink_i_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::message_sink_i.

        To avoid accidental use of raw pointers, doa::message_sink_i's constructor is in a private implementation class. doa::message_sink_i::make is the public interface for creating new instances.
        """
        return _doa_swig.message_sink_i_sptr_make(self)

    def history(self) -> "unsigned int":
        r"""history(message_sink_i_sptr self) -> unsigned int"""
        return _doa_swig.message_sink_i_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(message_sink_i_sptr self, int which, int delay)
        declare_sample_delay(message_sink_i_sptr self, unsigned int delay)
        """
        return _doa_swig.message_sink_i_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(message_sink_i_sptr self, int which) -> unsigned int"""
        return _doa_swig.message_sink_i_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(message_sink_i_sptr self, int multiple)"""
        return _doa_swig.message_sink_i_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(message_sink_i_sptr self) -> int"""
        return _doa_swig.message_sink_i_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(message_sink_i_sptr self) -> double"""
        return _doa_swig.message_sink_i_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(message_sink_i_sptr self) -> uint64_t"""
        return _doa_swig.message_sink_i_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(message_sink_i_sptr self) -> uint64_t"""
        return _doa_swig.message_sink_i_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(message_sink_i_sptr self) -> bool"""
        return _doa_swig.message_sink_i_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(message_sink_i_sptr self) -> bool"""
        return _doa_swig.message_sink_i_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(message_sink_i_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.message_sink_i_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(message_sink_i_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.message_sink_i_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(message_sink_i_sptr self, std::string level)"""
        return _doa_swig.message_sink_i_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(message_sink_i_sptr self) -> std::string"""
        return _doa_swig.message_sink_i_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(message_sink_i_sptr self) -> int"""
        return _doa_swig.message_sink_i_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(message_sink_i_sptr self, int m)"""
        return _doa_swig.message_sink_i_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(message_sink_i_sptr self)"""
        return _doa_swig.message_sink_i_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(message_sink_i_sptr self) -> bool"""
        return _doa_swig.message_sink_i_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(message_sink_i_sptr self, int m)"""
        return _doa_swig.message_sink_i_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(message_sink_i_sptr self) -> int"""
        return _doa_swig.message_sink_i_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(message_sink_i_sptr self, int i) -> long"""
        return _doa_swig.message_sink_i_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(message_sink_i_sptr self, long max_output_buffer)
        set_max_output_buffer(message_sink_i_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.message_sink_i_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(message_sink_i_sptr self, int i) -> long"""
        return _doa_swig.message_sink_i_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(message_sink_i_sptr self, long min_output_buffer)
        set_min_output_buffer(message_sink_i_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.message_sink_i_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(message_sink_i_sptr self) -> float"""
        return _doa_swig.message_sink_i_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(message_sink_i_sptr self) -> float"""
        return _doa_swig.message_sink_i_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(message_sink_i_sptr self) -> float"""
        return _doa_swig.message_sink_i_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(message_sink_i_sptr self) -> float"""
        return _doa_swig.message_sink_i_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(message_sink_i_sptr self) -> float"""
        return _doa_swig.message_sink_i_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(message_sink_i_sptr self) -> float"""
        return _doa_swig.message_sink_i_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(message_sink_i_sptr self, int which) -> float
        pc_input_buffers_full(message_sink_i_sptr self) -> pmt_vector_float
        """
        return _doa_swig.message_sink_i_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(message_sink_i_sptr self, int which) -> float
        pc_input_buffers_full_avg(message_sink_i_sptr self) -> pmt_vector_float
        """
        return _doa_swig.message_sink_i_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(message_sink_i_sptr self, int which) -> float
        pc_input_buffers_full_var(message_sink_i_sptr self) -> pmt_vector_float
        """
        return _doa_swig.message_sink_i_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(message_sink_i_sptr self, int which) -> float
        pc_output_buffers_full(message_sink_i_sptr self) -> pmt_vector_float
        """
        return _doa_swig.message_sink_i_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(message_sink_i_sptr self, int which) -> float
        pc_output_buffers_full_avg(message_sink_i_sptr self) -> pmt_vector_float
        """
        return _doa_swig.message_sink_i_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(message_sink_i_sptr self, int which) -> float
        pc_output_buffers_full_var(message_sink_i_sptr self) -> pmt_vector_float
        """
        return _doa_swig.message_sink_i_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(message_sink_i_sptr self) -> float"""
        return _doa_swig.message_sink_i_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(message_sink_i_sptr self) -> float"""
        return _doa_swig.message_sink_i_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(message_sink_i_sptr self) -> float"""
        return _doa_swig.message_sink_i_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(message_sink_i_sptr self) -> float"""
        return _doa_swig.message_sink_i_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(message_sink_i_sptr self) -> float"""
        return _doa_swig.message_sink_i_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(message_sink_i_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.message_sink_i_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(message_sink_i_sptr self)"""
        return _doa_swig.message_sink_i_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(message_sink_i_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.message_sink_i_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(message_sink_i_sptr self) -> int"""
        return _doa_swig.message_sink_i_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(message_sink_i_sptr self) -> int"""
        return _doa_swig.message_sink_i_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(message_sink_i_sptr self, int priority) -> int"""
        return _doa_swig.message_sink_i_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(message_sink_i_sptr self) -> std::string"""
        return _doa_swig.message_sink_i_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(message_sink_i_sptr self) -> std::string"""
        return _doa_swig.message_sink_i_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(message_sink_i_sptr self) -> io_signature_sptr"""
        return _doa_swig.message_sink_i_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(message_sink_i_sptr self) -> io_signature_sptr"""
        return _doa_swig.message_sink_i_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(message_sink_i_sptr self) -> long"""
        return _doa_swig.message_sink_i_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(message_sink_i_sptr self) -> basic_block_sptr"""
        return _doa_swig.message_sink_i_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(message_sink_i_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.message_sink_i_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(message_sink_i_sptr self) -> std::string"""
        return _doa_swig.message_sink_i_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(message_sink_i_sptr self, std::string name)"""
        return _doa_swig.message_sink_i_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(message_sink_i_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.message_sink_i_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(message_sink_i_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.message_sink_i_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(message_sink_i_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.message_sink_i_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(message_sink_i_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.message_sink_i_sptr_message_subscribers(self, which_port)

# Register message_sink_i_sptr in _doa_swig:
_doa_swig.message_sink_i_sptr_swigregister(message_sink_i_sptr)


message_sink_i_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
message_sink_i = message_sink_i.make;

class message_sink_f(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::message_sink_f.

    To avoid accidental use of raw pointers, doa::message_sink_f's constructor is in a private implementation class. doa::message_sink_f::make is the public interface for creating new instances.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make() -> "gr::doa::message_sink_f::sptr":
        r"""
        make() -> message_sink_f_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::message_sink_f.

        To avoid accidental use of raw pointers, doa::message_sink_f's constructor is in a private implementation class. doa::message_sink_f::make is the public interface for creating new instances.
        """
        return _doa_swig.message_sink_f_make()
    __swig_destroy__ = _doa_swig.delete_message_sink_f

# Register message_sink_f in _doa_swig:
_doa_swig.message_sink_f_swigregister(message_sink_f)

def message_sink_f_make() -> "gr::doa::message_sink_f::sptr":
    r"""
    message_sink_f_make() -> message_sink_f_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::message_sink_f.

    To avoid accidental use of raw pointers, doa::message_sink_f's constructor is in a private implementation class. doa::message_sink_f::make is the public interface for creating new instances.
    """
    return _doa_swig.message_sink_f_make()

class message_sink_f_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::message_sink_f > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(message_sink_f_sptr self) -> message_sink_f_sptr
        __init__(message_sink_f_sptr self, message_sink_f p) -> message_sink_f_sptr
        """
        _doa_swig.message_sink_f_sptr_swiginit(self, _doa_swig.new_message_sink_f_sptr(*args))

    def __deref__(self) -> "gr::doa::message_sink_f *":
        r"""__deref__(message_sink_f_sptr self) -> message_sink_f"""
        return _doa_swig.message_sink_f_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_message_sink_f_sptr

    def make(self) -> "gr::doa::message_sink_f::sptr":
        r"""
        make(message_sink_f_sptr self) -> message_sink_f_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::message_sink_f.

        To avoid accidental use of raw pointers, doa::message_sink_f's constructor is in a private implementation class. doa::message_sink_f::make is the public interface for creating new instances.
        """
        return _doa_swig.message_sink_f_sptr_make(self)

    def history(self) -> "unsigned int":
        r"""history(message_sink_f_sptr self) -> unsigned int"""
        return _doa_swig.message_sink_f_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(message_sink_f_sptr self, int which, int delay)
        declare_sample_delay(message_sink_f_sptr self, unsigned int delay)
        """
        return _doa_swig.message_sink_f_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(message_sink_f_sptr self, int which) -> unsigned int"""
        return _doa_swig.message_sink_f_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(message_sink_f_sptr self, int multiple)"""
        return _doa_swig.message_sink_f_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(message_sink_f_sptr self) -> int"""
        return _doa_swig.message_sink_f_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(message_sink_f_sptr self) -> double"""
        return _doa_swig.message_sink_f_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(message_sink_f_sptr self) -> uint64_t"""
        return _doa_swig.message_sink_f_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(message_sink_f_sptr self) -> uint64_t"""
        return _doa_swig.message_sink_f_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(message_sink_f_sptr self) -> bool"""
        return _doa_swig.message_sink_f_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(message_sink_f_sptr self) -> bool"""
        return _doa_swig.message_sink_f_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(message_sink_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.message_sink_f_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(message_sink_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.message_sink_f_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(message_sink_f_sptr self, std::string level)"""
        return _doa_swig.message_sink_f_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(message_sink_f_sptr self) -> std::string"""
        return _doa_swig.message_sink_f_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(message_sink_f_sptr self) -> int"""
        return _doa_swig.message_sink_f_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(message_sink_f_sptr self, int m)"""
        return _doa_swig.message_sink_f_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(message_sink_f_sptr self)"""
        return _doa_swig.message_sink_f_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(message_sink_f_sptr self) -> bool"""
        return _doa_swig.message_sink_f_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(message_sink_f_sptr self, int m)"""
        return _doa_swig.message_sink_f_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(message_sink_f_sptr self) -> int"""
        return _doa_swig.message_sink_f_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(message_sink_f_sptr self, int i) -> long"""
        return _doa_swig.message_sink_f_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(message_sink_f_sptr self, long max_output_buffer)
        set_max_output_buffer(message_sink_f_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.message_sink_f_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(message_sink_f_sptr self, int i) -> long"""
        return _doa_swig.message_sink_f_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(message_sink_f_sptr self, long min_output_buffer)
        set_min_output_buffer(message_sink_f_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.message_sink_f_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(message_sink_f_sptr self) -> float"""
        return _doa_swig.message_sink_f_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(message_sink_f_sptr self) -> float"""
        return _doa_swig.message_sink_f_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(message_sink_f_sptr self) -> float"""
        return _doa_swig.message_sink_f_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(message_sink_f_sptr self) -> float"""
        return _doa_swig.message_sink_f_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(message_sink_f_sptr self) -> float"""
        return _doa_swig.message_sink_f_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(message_sink_f_sptr self) -> float"""
        return _doa_swig.message_sink_f_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(message_sink_f_sptr self, int which) -> float
        pc_input_buffers_full(message_sink_f_sptr self) -> pmt_vector_float
        """
        return _doa_swig.message_sink_f_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(message_sink_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(message_sink_f_sptr self) -> pmt_vector_float
        """
        return _doa_swig.message_sink_f_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(message_sink_f_sptr self, int which) -> float
        pc_input_buffers_full_var(message_sink_f_sptr self) -> pmt_vector_float
        """
        return _doa_swig.message_sink_f_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(message_sink_f_sptr self, int which) -> float
        pc_output_buffers_full(message_sink_f_sptr self) -> pmt_vector_float
        """
        return _doa_swig.message_sink_f_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(message_sink_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(message_sink_f_sptr self) -> pmt_vector_float
        """
        return _doa_swig.message_sink_f_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(message_sink_f_sptr self, int which) -> float
        pc_output_buffers_full_var(message_sink_f_sptr self) -> pmt_vector_float
        """
        return _doa_swig.message_sink_f_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(message_sink_f_sptr self) -> float"""
        return _doa_swig.message_sink_f_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(message_sink_f_sptr self) -> float"""
        return _doa_swig.message_sink_f_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(message_sink_f_sptr self) -> float"""
        return _doa_swig.message_sink_f_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(message_sink_f_sptr self) -> float"""
        return _doa_swig.message_sink_f_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(message_sink_f_sptr self) -> float"""
        return _doa_swig.message_sink_f_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(message_sink_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.message_sink_f_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(message_sink_f_sptr self)"""
        return _doa_swig.message_sink_f_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(message_sink_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.message_sink_f_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(message_sink_f_sptr self) -> int"""
        return _doa_swig.message_sink_f_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(message_sink_f_sptr self) -> int"""
        return _doa_swig.message_sink_f_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(message_sink_f_sptr self, int priority) -> int"""
        return _doa_swig.message_sink_f_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(message_sink_f_sptr self) -> std::string"""
        return _doa_swig.message_sink_f_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(message_sink_f_sptr self) -> std::string"""
        return _doa_swig.message_sink_f_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(message_sink_f_sptr self) -> io_signature_sptr"""
        return _doa_swig.message_sink_f_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(message_sink_f_sptr self) -> io_signature_sptr"""
        return _doa_swig.message_sink_f_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(message_sink_f_sptr self) -> long"""
        return _doa_swig.message_sink_f_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(message_sink_f_sptr self) -> basic_block_sptr"""
        return _doa_swig.message_sink_f_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(message_sink_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.message_sink_f_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(message_sink_f_sptr self) -> std::string"""
        return _doa_swig.message_sink_f_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(message_sink_f_sptr self, std::string name)"""
        return _doa_swig.message_sink_f_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(message_sink_f_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.message_sink_f_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(message_sink_f_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.message_sink_f_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(message_sink_f_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.message_sink_f_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(message_sink_f_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.message_sink_f_sptr_message_subscribers(self, which_port)

# Register message_sink_f_sptr in _doa_swig:
_doa_swig.message_sink_f_sptr_swigregister(message_sink_f_sptr)


message_sink_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
message_sink_f = message_sink_f.make;

class add_const_ff(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::add_const_ff.

    To avoid accidental use of raw pointers, doa::add_const_ff's constructor is in a private implementation class. doa::add_const_ff::make is the public interface for creating new instances.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make() -> "gr::doa::add_const_ff::sptr":
        r"""
        make() -> add_const_ff_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::add_const_ff.

        To avoid accidental use of raw pointers, doa::add_const_ff's constructor is in a private implementation class. doa::add_const_ff::make is the public interface for creating new instances.
        """
        return _doa_swig.add_const_ff_make()

    def set_const(self, k: "float") -> "void":
        r"""set_const(add_const_ff self, float k)"""
        return _doa_swig.add_const_ff_set_const(self, k)
    __swig_destroy__ = _doa_swig.delete_add_const_ff

# Register add_const_ff in _doa_swig:
_doa_swig.add_const_ff_swigregister(add_const_ff)

def add_const_ff_make() -> "gr::doa::add_const_ff::sptr":
    r"""
    add_const_ff_make() -> add_const_ff_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::add_const_ff.

    To avoid accidental use of raw pointers, doa::add_const_ff's constructor is in a private implementation class. doa::add_const_ff::make is the public interface for creating new instances.
    """
    return _doa_swig.add_const_ff_make()

class add_const_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::add_const_ff > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(add_const_ff_sptr self) -> add_const_ff_sptr
        __init__(add_const_ff_sptr self, add_const_ff p) -> add_const_ff_sptr
        """
        _doa_swig.add_const_ff_sptr_swiginit(self, _doa_swig.new_add_const_ff_sptr(*args))

    def __deref__(self) -> "gr::doa::add_const_ff *":
        r"""__deref__(add_const_ff_sptr self) -> add_const_ff"""
        return _doa_swig.add_const_ff_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_add_const_ff_sptr

    def make(self) -> "gr::doa::add_const_ff::sptr":
        r"""
        make(add_const_ff_sptr self) -> add_const_ff_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::add_const_ff.

        To avoid accidental use of raw pointers, doa::add_const_ff's constructor is in a private implementation class. doa::add_const_ff::make is the public interface for creating new instances.
        """
        return _doa_swig.add_const_ff_sptr_make(self)

    def set_const(self, k: "float") -> "void":
        r"""set_const(add_const_ff_sptr self, float k)"""
        return _doa_swig.add_const_ff_sptr_set_const(self, k)

    def history(self) -> "unsigned int":
        r"""history(add_const_ff_sptr self) -> unsigned int"""
        return _doa_swig.add_const_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(add_const_ff_sptr self, int which, int delay)
        declare_sample_delay(add_const_ff_sptr self, unsigned int delay)
        """
        return _doa_swig.add_const_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(add_const_ff_sptr self, int which) -> unsigned int"""
        return _doa_swig.add_const_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(add_const_ff_sptr self, int multiple)"""
        return _doa_swig.add_const_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(add_const_ff_sptr self) -> int"""
        return _doa_swig.add_const_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(add_const_ff_sptr self) -> double"""
        return _doa_swig.add_const_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(add_const_ff_sptr self) -> uint64_t"""
        return _doa_swig.add_const_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(add_const_ff_sptr self) -> uint64_t"""
        return _doa_swig.add_const_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(add_const_ff_sptr self) -> bool"""
        return _doa_swig.add_const_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(add_const_ff_sptr self) -> bool"""
        return _doa_swig.add_const_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(add_const_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.add_const_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(add_const_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.add_const_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(add_const_ff_sptr self, std::string level)"""
        return _doa_swig.add_const_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(add_const_ff_sptr self) -> std::string"""
        return _doa_swig.add_const_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(add_const_ff_sptr self) -> int"""
        return _doa_swig.add_const_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(add_const_ff_sptr self, int m)"""
        return _doa_swig.add_const_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(add_const_ff_sptr self)"""
        return _doa_swig.add_const_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(add_const_ff_sptr self) -> bool"""
        return _doa_swig.add_const_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(add_const_ff_sptr self, int m)"""
        return _doa_swig.add_const_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(add_const_ff_sptr self) -> int"""
        return _doa_swig.add_const_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(add_const_ff_sptr self, int i) -> long"""
        return _doa_swig.add_const_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(add_const_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_ff_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.add_const_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(add_const_ff_sptr self, int i) -> long"""
        return _doa_swig.add_const_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(add_const_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_ff_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.add_const_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(add_const_ff_sptr self) -> float"""
        return _doa_swig.add_const_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(add_const_ff_sptr self) -> float"""
        return _doa_swig.add_const_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(add_const_ff_sptr self) -> float"""
        return _doa_swig.add_const_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(add_const_ff_sptr self) -> float"""
        return _doa_swig.add_const_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(add_const_ff_sptr self) -> float"""
        return _doa_swig.add_const_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(add_const_ff_sptr self) -> float"""
        return _doa_swig.add_const_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(add_const_ff_sptr self, int which) -> float
        pc_input_buffers_full(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.add_const_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(add_const_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.add_const_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(add_const_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.add_const_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(add_const_ff_sptr self, int which) -> float
        pc_output_buffers_full(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.add_const_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(add_const_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.add_const_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(add_const_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.add_const_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(add_const_ff_sptr self) -> float"""
        return _doa_swig.add_const_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(add_const_ff_sptr self) -> float"""
        return _doa_swig.add_const_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(add_const_ff_sptr self) -> float"""
        return _doa_swig.add_const_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(add_const_ff_sptr self) -> float"""
        return _doa_swig.add_const_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(add_const_ff_sptr self) -> float"""
        return _doa_swig.add_const_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(add_const_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.add_const_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(add_const_ff_sptr self)"""
        return _doa_swig.add_const_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(add_const_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.add_const_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(add_const_ff_sptr self) -> int"""
        return _doa_swig.add_const_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(add_const_ff_sptr self) -> int"""
        return _doa_swig.add_const_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(add_const_ff_sptr self, int priority) -> int"""
        return _doa_swig.add_const_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(add_const_ff_sptr self) -> std::string"""
        return _doa_swig.add_const_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(add_const_ff_sptr self) -> std::string"""
        return _doa_swig.add_const_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(add_const_ff_sptr self) -> io_signature_sptr"""
        return _doa_swig.add_const_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(add_const_ff_sptr self) -> io_signature_sptr"""
        return _doa_swig.add_const_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(add_const_ff_sptr self) -> long"""
        return _doa_swig.add_const_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(add_const_ff_sptr self) -> basic_block_sptr"""
        return _doa_swig.add_const_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(add_const_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.add_const_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(add_const_ff_sptr self) -> std::string"""
        return _doa_swig.add_const_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(add_const_ff_sptr self, std::string name)"""
        return _doa_swig.add_const_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(add_const_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.add_const_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(add_const_ff_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.add_const_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(add_const_ff_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.add_const_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(add_const_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.add_const_ff_sptr_message_subscribers(self, which_port)

# Register add_const_ff_sptr in _doa_swig:
_doa_swig.add_const_ff_sptr_swigregister(add_const_ff_sptr)


add_const_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_ff = add_const_ff.make;

class phase2doa_ff(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::phase2doa_ff.

    To avoid accidental use of raw pointers, doa::phase2doa_ff's constructor is in a private implementation class. doa::phase2doa_ff::make is the public interface for creating new instances.

    Args:
        alpha : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(alpha: "float") -> "gr::doa::phase2doa_ff::sptr":
        r"""
        make(float alpha) -> phase2doa_ff_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::phase2doa_ff.

        To avoid accidental use of raw pointers, doa::phase2doa_ff's constructor is in a private implementation class. doa::phase2doa_ff::make is the public interface for creating new instances.

        Args:
            alpha : 
        """
        return _doa_swig.phase2doa_ff_make(alpha)
    __swig_destroy__ = _doa_swig.delete_phase2doa_ff

# Register phase2doa_ff in _doa_swig:
_doa_swig.phase2doa_ff_swigregister(phase2doa_ff)

def phase2doa_ff_make(alpha: "float") -> "gr::doa::phase2doa_ff::sptr":
    r"""
    phase2doa_ff_make(float alpha) -> phase2doa_ff_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::phase2doa_ff.

    To avoid accidental use of raw pointers, doa::phase2doa_ff's constructor is in a private implementation class. doa::phase2doa_ff::make is the public interface for creating new instances.

    Args:
        alpha : 
    """
    return _doa_swig.phase2doa_ff_make(alpha)

class phase2doa_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::phase2doa_ff > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(phase2doa_ff_sptr self) -> phase2doa_ff_sptr
        __init__(phase2doa_ff_sptr self, phase2doa_ff p) -> phase2doa_ff_sptr
        """
        _doa_swig.phase2doa_ff_sptr_swiginit(self, _doa_swig.new_phase2doa_ff_sptr(*args))

    def __deref__(self) -> "gr::doa::phase2doa_ff *":
        r"""__deref__(phase2doa_ff_sptr self) -> phase2doa_ff"""
        return _doa_swig.phase2doa_ff_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_phase2doa_ff_sptr

    def make(self, alpha: "float") -> "gr::doa::phase2doa_ff::sptr":
        r"""
        make(phase2doa_ff_sptr self, float alpha) -> phase2doa_ff_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::phase2doa_ff.

        To avoid accidental use of raw pointers, doa::phase2doa_ff's constructor is in a private implementation class. doa::phase2doa_ff::make is the public interface for creating new instances.

        Args:
            alpha : 
        """
        return _doa_swig.phase2doa_ff_sptr_make(self, alpha)

    def history(self) -> "unsigned int":
        r"""history(phase2doa_ff_sptr self) -> unsigned int"""
        return _doa_swig.phase2doa_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(phase2doa_ff_sptr self, int which, int delay)
        declare_sample_delay(phase2doa_ff_sptr self, unsigned int delay)
        """
        return _doa_swig.phase2doa_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(phase2doa_ff_sptr self, int which) -> unsigned int"""
        return _doa_swig.phase2doa_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(phase2doa_ff_sptr self, int multiple)"""
        return _doa_swig.phase2doa_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(phase2doa_ff_sptr self) -> int"""
        return _doa_swig.phase2doa_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(phase2doa_ff_sptr self) -> double"""
        return _doa_swig.phase2doa_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(phase2doa_ff_sptr self) -> uint64_t"""
        return _doa_swig.phase2doa_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(phase2doa_ff_sptr self) -> uint64_t"""
        return _doa_swig.phase2doa_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(phase2doa_ff_sptr self) -> bool"""
        return _doa_swig.phase2doa_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(phase2doa_ff_sptr self) -> bool"""
        return _doa_swig.phase2doa_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(phase2doa_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.phase2doa_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(phase2doa_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.phase2doa_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(phase2doa_ff_sptr self, std::string level)"""
        return _doa_swig.phase2doa_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(phase2doa_ff_sptr self) -> std::string"""
        return _doa_swig.phase2doa_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(phase2doa_ff_sptr self) -> int"""
        return _doa_swig.phase2doa_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(phase2doa_ff_sptr self, int m)"""
        return _doa_swig.phase2doa_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(phase2doa_ff_sptr self)"""
        return _doa_swig.phase2doa_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(phase2doa_ff_sptr self) -> bool"""
        return _doa_swig.phase2doa_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(phase2doa_ff_sptr self, int m)"""
        return _doa_swig.phase2doa_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(phase2doa_ff_sptr self) -> int"""
        return _doa_swig.phase2doa_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(phase2doa_ff_sptr self, int i) -> long"""
        return _doa_swig.phase2doa_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(phase2doa_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(phase2doa_ff_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.phase2doa_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(phase2doa_ff_sptr self, int i) -> long"""
        return _doa_swig.phase2doa_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(phase2doa_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(phase2doa_ff_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.phase2doa_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(phase2doa_ff_sptr self) -> float"""
        return _doa_swig.phase2doa_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(phase2doa_ff_sptr self) -> float"""
        return _doa_swig.phase2doa_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(phase2doa_ff_sptr self) -> float"""
        return _doa_swig.phase2doa_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(phase2doa_ff_sptr self) -> float"""
        return _doa_swig.phase2doa_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(phase2doa_ff_sptr self) -> float"""
        return _doa_swig.phase2doa_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(phase2doa_ff_sptr self) -> float"""
        return _doa_swig.phase2doa_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(phase2doa_ff_sptr self, int which) -> float
        pc_input_buffers_full(phase2doa_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.phase2doa_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(phase2doa_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(phase2doa_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.phase2doa_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(phase2doa_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(phase2doa_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.phase2doa_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(phase2doa_ff_sptr self, int which) -> float
        pc_output_buffers_full(phase2doa_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.phase2doa_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(phase2doa_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(phase2doa_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.phase2doa_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(phase2doa_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(phase2doa_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.phase2doa_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(phase2doa_ff_sptr self) -> float"""
        return _doa_swig.phase2doa_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(phase2doa_ff_sptr self) -> float"""
        return _doa_swig.phase2doa_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(phase2doa_ff_sptr self) -> float"""
        return _doa_swig.phase2doa_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(phase2doa_ff_sptr self) -> float"""
        return _doa_swig.phase2doa_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(phase2doa_ff_sptr self) -> float"""
        return _doa_swig.phase2doa_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(phase2doa_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.phase2doa_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(phase2doa_ff_sptr self)"""
        return _doa_swig.phase2doa_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(phase2doa_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.phase2doa_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(phase2doa_ff_sptr self) -> int"""
        return _doa_swig.phase2doa_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(phase2doa_ff_sptr self) -> int"""
        return _doa_swig.phase2doa_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(phase2doa_ff_sptr self, int priority) -> int"""
        return _doa_swig.phase2doa_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(phase2doa_ff_sptr self) -> std::string"""
        return _doa_swig.phase2doa_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(phase2doa_ff_sptr self) -> std::string"""
        return _doa_swig.phase2doa_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(phase2doa_ff_sptr self) -> io_signature_sptr"""
        return _doa_swig.phase2doa_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(phase2doa_ff_sptr self) -> io_signature_sptr"""
        return _doa_swig.phase2doa_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(phase2doa_ff_sptr self) -> long"""
        return _doa_swig.phase2doa_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(phase2doa_ff_sptr self) -> basic_block_sptr"""
        return _doa_swig.phase2doa_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(phase2doa_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.phase2doa_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(phase2doa_ff_sptr self) -> std::string"""
        return _doa_swig.phase2doa_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(phase2doa_ff_sptr self, std::string name)"""
        return _doa_swig.phase2doa_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(phase2doa_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.phase2doa_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(phase2doa_ff_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.phase2doa_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(phase2doa_ff_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.phase2doa_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(phase2doa_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.phase2doa_ff_sptr_message_subscribers(self, which_port)

# Register phase2doa_ff_sptr in _doa_swig:
_doa_swig.phase2doa_ff_sptr_swigregister(phase2doa_ff_sptr)


phase2doa_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
phase2doa_ff = phase2doa_ff.make;

class hold_state_ff(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::hold_state_ff.

    To avoid accidental use of raw pointers, doa::hold_state_ff's constructor is in a private implementation class. doa::hold_state_ff::make is the public interface for creating new instances.

    Args:
        state : 
        scale0 : 
        scale1 : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(state: "int", scale0: "float", scale1: "float") -> "gr::doa::hold_state_ff::sptr":
        r"""
        make(int state, float scale0, float scale1) -> hold_state_ff_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::hold_state_ff.

        To avoid accidental use of raw pointers, doa::hold_state_ff's constructor is in a private implementation class. doa::hold_state_ff::make is the public interface for creating new instances.

        Args:
            state : 
            scale0 : 
            scale1 : 
        """
        return _doa_swig.hold_state_ff_make(state, scale0, scale1)

    def set_state(self, new_state: "int") -> "void":
        r"""set_state(hold_state_ff self, int new_state)"""
        return _doa_swig.hold_state_ff_set_state(self, new_state)
    __swig_destroy__ = _doa_swig.delete_hold_state_ff

# Register hold_state_ff in _doa_swig:
_doa_swig.hold_state_ff_swigregister(hold_state_ff)

def hold_state_ff_make(state: "int", scale0: "float", scale1: "float") -> "gr::doa::hold_state_ff::sptr":
    r"""
    hold_state_ff_make(int state, float scale0, float scale1) -> hold_state_ff_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of doa::hold_state_ff.

    To avoid accidental use of raw pointers, doa::hold_state_ff's constructor is in a private implementation class. doa::hold_state_ff::make is the public interface for creating new instances.

    Args:
        state : 
        scale0 : 
        scale1 : 
    """
    return _doa_swig.hold_state_ff_make(state, scale0, scale1)

class hold_state_ff_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::doa::hold_state_ff > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(hold_state_ff_sptr self) -> hold_state_ff_sptr
        __init__(hold_state_ff_sptr self, hold_state_ff p) -> hold_state_ff_sptr
        """
        _doa_swig.hold_state_ff_sptr_swiginit(self, _doa_swig.new_hold_state_ff_sptr(*args))

    def __deref__(self) -> "gr::doa::hold_state_ff *":
        r"""__deref__(hold_state_ff_sptr self) -> hold_state_ff"""
        return _doa_swig.hold_state_ff_sptr___deref__(self)
    __swig_destroy__ = _doa_swig.delete_hold_state_ff_sptr

    def make(self, state: "int", scale0: "float", scale1: "float") -> "gr::doa::hold_state_ff::sptr":
        r"""
        make(hold_state_ff_sptr self, int state, float scale0, float scale1) -> hold_state_ff_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of doa::hold_state_ff.

        To avoid accidental use of raw pointers, doa::hold_state_ff's constructor is in a private implementation class. doa::hold_state_ff::make is the public interface for creating new instances.

        Args:
            state : 
            scale0 : 
            scale1 : 
        """
        return _doa_swig.hold_state_ff_sptr_make(self, state, scale0, scale1)

    def set_state(self, new_state: "int") -> "void":
        r"""set_state(hold_state_ff_sptr self, int new_state)"""
        return _doa_swig.hold_state_ff_sptr_set_state(self, new_state)

    def history(self) -> "unsigned int":
        r"""history(hold_state_ff_sptr self) -> unsigned int"""
        return _doa_swig.hold_state_ff_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(hold_state_ff_sptr self, int which, int delay)
        declare_sample_delay(hold_state_ff_sptr self, unsigned int delay)
        """
        return _doa_swig.hold_state_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(hold_state_ff_sptr self, int which) -> unsigned int"""
        return _doa_swig.hold_state_ff_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(hold_state_ff_sptr self, int multiple)"""
        return _doa_swig.hold_state_ff_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(hold_state_ff_sptr self) -> int"""
        return _doa_swig.hold_state_ff_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(hold_state_ff_sptr self) -> double"""
        return _doa_swig.hold_state_ff_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(hold_state_ff_sptr self) -> uint64_t"""
        return _doa_swig.hold_state_ff_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(hold_state_ff_sptr self) -> uint64_t"""
        return _doa_swig.hold_state_ff_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(hold_state_ff_sptr self) -> bool"""
        return _doa_swig.hold_state_ff_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(hold_state_ff_sptr self) -> bool"""
        return _doa_swig.hold_state_ff_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(hold_state_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _doa_swig.hold_state_ff_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(hold_state_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _doa_swig.hold_state_ff_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(hold_state_ff_sptr self, std::string level)"""
        return _doa_swig.hold_state_ff_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(hold_state_ff_sptr self) -> std::string"""
        return _doa_swig.hold_state_ff_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(hold_state_ff_sptr self) -> int"""
        return _doa_swig.hold_state_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(hold_state_ff_sptr self, int m)"""
        return _doa_swig.hold_state_ff_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(hold_state_ff_sptr self)"""
        return _doa_swig.hold_state_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(hold_state_ff_sptr self) -> bool"""
        return _doa_swig.hold_state_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(hold_state_ff_sptr self, int m)"""
        return _doa_swig.hold_state_ff_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(hold_state_ff_sptr self) -> int"""
        return _doa_swig.hold_state_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(hold_state_ff_sptr self, int i) -> long"""
        return _doa_swig.hold_state_ff_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(hold_state_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(hold_state_ff_sptr self, int port, long max_output_buffer)
        """
        return _doa_swig.hold_state_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(hold_state_ff_sptr self, int i) -> long"""
        return _doa_swig.hold_state_ff_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(hold_state_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(hold_state_ff_sptr self, int port, long min_output_buffer)
        """
        return _doa_swig.hold_state_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(hold_state_ff_sptr self) -> float"""
        return _doa_swig.hold_state_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(hold_state_ff_sptr self) -> float"""
        return _doa_swig.hold_state_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(hold_state_ff_sptr self) -> float"""
        return _doa_swig.hold_state_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(hold_state_ff_sptr self) -> float"""
        return _doa_swig.hold_state_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(hold_state_ff_sptr self) -> float"""
        return _doa_swig.hold_state_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(hold_state_ff_sptr self) -> float"""
        return _doa_swig.hold_state_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(hold_state_ff_sptr self, int which) -> float
        pc_input_buffers_full(hold_state_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.hold_state_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(hold_state_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(hold_state_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.hold_state_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(hold_state_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(hold_state_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.hold_state_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(hold_state_ff_sptr self, int which) -> float
        pc_output_buffers_full(hold_state_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.hold_state_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(hold_state_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(hold_state_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.hold_state_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(hold_state_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(hold_state_ff_sptr self) -> pmt_vector_float
        """
        return _doa_swig.hold_state_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(hold_state_ff_sptr self) -> float"""
        return _doa_swig.hold_state_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(hold_state_ff_sptr self) -> float"""
        return _doa_swig.hold_state_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(hold_state_ff_sptr self) -> float"""
        return _doa_swig.hold_state_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(hold_state_ff_sptr self) -> float"""
        return _doa_swig.hold_state_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(hold_state_ff_sptr self) -> float"""
        return _doa_swig.hold_state_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(hold_state_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _doa_swig.hold_state_ff_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(hold_state_ff_sptr self)"""
        return _doa_swig.hold_state_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(hold_state_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _doa_swig.hold_state_ff_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(hold_state_ff_sptr self) -> int"""
        return _doa_swig.hold_state_ff_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(hold_state_ff_sptr self) -> int"""
        return _doa_swig.hold_state_ff_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(hold_state_ff_sptr self, int priority) -> int"""
        return _doa_swig.hold_state_ff_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(hold_state_ff_sptr self) -> std::string"""
        return _doa_swig.hold_state_ff_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(hold_state_ff_sptr self) -> std::string"""
        return _doa_swig.hold_state_ff_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(hold_state_ff_sptr self) -> io_signature_sptr"""
        return _doa_swig.hold_state_ff_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(hold_state_ff_sptr self) -> io_signature_sptr"""
        return _doa_swig.hold_state_ff_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(hold_state_ff_sptr self) -> long"""
        return _doa_swig.hold_state_ff_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(hold_state_ff_sptr self) -> basic_block_sptr"""
        return _doa_swig.hold_state_ff_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(hold_state_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _doa_swig.hold_state_ff_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(hold_state_ff_sptr self) -> std::string"""
        return _doa_swig.hold_state_ff_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(hold_state_ff_sptr self, std::string name)"""
        return _doa_swig.hold_state_ff_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(hold_state_ff_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _doa_swig.hold_state_ff_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(hold_state_ff_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.hold_state_ff_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(hold_state_ff_sptr self) -> swig_pmt_ptr"""
        return _doa_swig.hold_state_ff_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(hold_state_ff_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _doa_swig.hold_state_ff_sptr_message_subscribers(self, which_port)

# Register hold_state_ff_sptr in _doa_swig:
_doa_swig.hold_state_ff_sptr_swigregister(hold_state_ff_sptr)


hold_state_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
hold_state_ff = hold_state_ff.make;



